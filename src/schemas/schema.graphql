# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
	query: Query
}

"Add date formatting options."
directive @dateformat(difference: String, formatString: String, fromNow: Boolean, locale: String) on FIELD_DEFINITION

"Link to node by foreign-key relation."
directive @link(by: String! = "id", from: String, on: String) on FIELD_DEFINITION

"Link to File node by relative path."
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

"Proxy resolver from another field."
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

"Infer field types from field values."
directive @infer on OBJECT

"Do not infer field types from field values."
directive @dontInfer on OBJECT

"Define the mime-types handled by this type."
directive @mimeTypes(
	"The mime-types handled by this type."
	types: [String!]! = []
) on OBJECT

"Define parent-child relations between types. This is used to add `child*` and `children*` convenience fields like `childImageSharp`."
directive @childOf(
	"A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin."
	mimeTypes: [String!]! = [],
	"A list of types this type is a child of. Usually these are the types handled by a transformer plugin."
	types: [String!]! = []
) on OBJECT

"""

DEPRECATED: Use interface inheritance instead, i.e. "interface Foo implements Node".

Adds root query fields for an interface. All implementing types must also implement the Node interface.
"""
directive @nodeInterface on INTERFACE

"Node Interface"
interface Node {
	children: [Node!]!
	id: ID!
	internal: Internal!
	parent: Node
}

interface PrismicSharedSliceType {
	id: ID!
	slice_label: String
	slice_type: String!
	variation: String!
	version: String!
}

interface PrismicSliceType {
	id: ID!
	slice_label: String
	slice_type: String!
}

union PrismicAllDocumentTypes = PrismicCategory | PrismicPicture | PrismicSeries | PrismicTags

type Directory implements Node {
	absolutePath: String!
	accessTime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	atime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	atimeMs: Float!
	base: String!
	birthTime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	birthtime: Date @deprecated(reason: "Use `birthTime` instead")
	birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
	changeTime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	children: [Node!]!
	ctime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	ctimeMs: Float!
	dev: Int!
	dir: String!
	ext: String!
	extension: String!
	gid: Int!
	id: ID!
	ino: Float!
	internal: Internal!
	mode: Int!
	modifiedTime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	mtime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	mtimeMs: Float!
	name: String!
	nlink: Int!
	parent: Node
	prettySize: String!
	rdev: Int!
	relativeDirectory: String!
	relativePath: String!
	root: String!
	size: Int!
	sourceInstanceName: String!
	uid: Int!
}

type DirectoryConnection {
	distinct(field: DirectoryFieldSelector!): [String!]!
	edges: [DirectoryEdge!]!
	group(field: DirectoryFieldSelector!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
	max(field: DirectoryFieldSelector!): Float
	min(field: DirectoryFieldSelector!): Float
	nodes: [Directory!]!
	pageInfo: PageInfo!
	sum(field: DirectoryFieldSelector!): Float
	totalCount: Int!
}

type DirectoryEdge {
	next: Directory
	node: Directory!
	previous: Directory
}

type DirectoryGroupConnection {
	distinct(field: DirectoryFieldSelector!): [String!]!
	edges: [DirectoryEdge!]!
	field: String!
	fieldValue: String
	group(field: DirectoryFieldSelector!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
	max(field: DirectoryFieldSelector!): Float
	min(field: DirectoryFieldSelector!): Float
	nodes: [Directory!]!
	pageInfo: PageInfo!
	sum(field: DirectoryFieldSelector!): Float
	totalCount: Int!
}

type File implements Node {
	absolutePath: String!
	accessTime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	atime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	atimeMs: Float!
	base: String!
	birthTime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	birthtime: Date @deprecated(reason: "Use `birthTime` instead")
	birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
	changeTime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	children: [Node!]!
	ctime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	ctimeMs: Float!
	dev: Int!
	dir: String!
	ext: String!
	extension: String!
	gid: Int!
	id: ID!
	ino: Float!
	internal: Internal!
	mode: Int!
	modifiedTime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	mtime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	mtimeMs: Float!
	name: String!
	nlink: Int!
	parent: Node
	prettySize: String!
	rdev: Int!
	relativeDirectory: String!
	relativePath: String!
	root: String!
	size: Int!
	sourceInstanceName: String!
	uid: Int!
}

type FileConnection {
	distinct(field: FileFieldSelector!): [String!]!
	edges: [FileEdge!]!
	group(field: FileFieldSelector!, limit: Int, skip: Int): [FileGroupConnection!]!
	max(field: FileFieldSelector!): Float
	min(field: FileFieldSelector!): Float
	nodes: [File!]!
	pageInfo: PageInfo!
	sum(field: FileFieldSelector!): Float
	totalCount: Int!
}

type FileEdge {
	next: File
	node: File!
	previous: File
}

type FileGroupConnection {
	distinct(field: FileFieldSelector!): [String!]!
	edges: [FileEdge!]!
	field: String!
	fieldValue: String
	group(field: FileFieldSelector!, limit: Int, skip: Int): [FileGroupConnection!]!
	max(field: FileFieldSelector!): Float
	min(field: FileFieldSelector!): Float
	nodes: [File!]!
	pageInfo: PageInfo!
	sum(field: FileFieldSelector!): Float
	totalCount: Int!
}

type ImgixFixed {
	base64: String!
	height: Int!
	sizes: String!
	src: String!
	srcSet: String!
	srcSetWebp: String!
	srcWebp: String!
	width: Int!
}

type ImgixFluid {
	aspectRatio: Float!
	base64: String!
	sizes: String!
	src: String!
	srcSet: String!
	srcSetWebp: String!
	srcWebp: String!
}

type Internal {
	content: String
	contentDigest: String!
	contentFilePath: String
	description: String
	fieldOwners: [String]
	ignoreType: Boolean
	mediaType: String
	owner: String!
	type: String!
}

type PageInfo {
	currentPage: Int!
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
	itemCount: Int!
	pageCount: Int!
	perPage: Int
	totalCount: Int!
}

type PrismicAlternateLanguageType {
	document: PrismicAllDocumentTypes
	id: ID
	lang: String
	raw: JSON
	type: String
	uid: String
}

type PrismicCategory implements Node {
	_previewable: ID!
	alternate_languages: [PrismicAlternateLanguageType!]!
	children: [Node!]!
	data: PrismicCategoryDataType!
	dataRaw: JSON!
	first_publication_date(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	href: String!
	id: ID!
	internal: Internal!
	lang: String!
	last_publication_date(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	parent: Node
	prismicId: ID!
	tags: [String!]!
	type: String!
	uid: String!
	url: String
}

type PrismicCategoryConnection {
	distinct(field: PrismicCategoryFieldSelector!): [String!]!
	edges: [PrismicCategoryEdge!]!
	group(field: PrismicCategoryFieldSelector!, limit: Int, skip: Int): [PrismicCategoryGroupConnection!]!
	max(field: PrismicCategoryFieldSelector!): Float
	min(field: PrismicCategoryFieldSelector!): Float
	nodes: [PrismicCategory!]!
	pageInfo: PageInfo!
	sum(field: PrismicCategoryFieldSelector!): Float
	totalCount: Int!
}

type PrismicCategoryDataType {
	title: String
}

type PrismicCategoryEdge {
	next: PrismicCategory
	node: PrismicCategory!
	previous: PrismicCategory
}

type PrismicCategoryGroupConnection {
	distinct(field: PrismicCategoryFieldSelector!): [String!]!
	edges: [PrismicCategoryEdge!]!
	field: String!
	fieldValue: String
	group(field: PrismicCategoryFieldSelector!, limit: Int, skip: Int): [PrismicCategoryGroupConnection!]!
	max(field: PrismicCategoryFieldSelector!): Float
	min(field: PrismicCategoryFieldSelector!): Float
	nodes: [PrismicCategory!]!
	pageInfo: PageInfo!
	sum(field: PrismicCategoryFieldSelector!): Float
	totalCount: Int!
}

type PrismicEmbedType implements Node {
	children: [Node!]!
	id: ID!
	internal: Internal!
	parent: Node
}

type PrismicEmbedTypeConnection {
	distinct(field: PrismicEmbedTypeFieldSelector!): [String!]!
	edges: [PrismicEmbedTypeEdge!]!
	group(field: PrismicEmbedTypeFieldSelector!, limit: Int, skip: Int): [PrismicEmbedTypeGroupConnection!]!
	max(field: PrismicEmbedTypeFieldSelector!): Float
	min(field: PrismicEmbedTypeFieldSelector!): Float
	nodes: [PrismicEmbedType!]!
	pageInfo: PageInfo!
	sum(field: PrismicEmbedTypeFieldSelector!): Float
	totalCount: Int!
}

type PrismicEmbedTypeEdge {
	next: PrismicEmbedType
	node: PrismicEmbedType!
	previous: PrismicEmbedType
}

type PrismicEmbedTypeGroupConnection {
	distinct(field: PrismicEmbedTypeFieldSelector!): [String!]!
	edges: [PrismicEmbedTypeEdge!]!
	field: String!
	fieldValue: String
	group(field: PrismicEmbedTypeFieldSelector!, limit: Int, skip: Int): [PrismicEmbedTypeGroupConnection!]!
	max(field: PrismicEmbedTypeFieldSelector!): Float
	min(field: PrismicEmbedTypeFieldSelector!): Float
	nodes: [PrismicEmbedType!]!
	pageInfo: PageInfo!
	sum(field: PrismicEmbedTypeFieldSelector!): Float
	totalCount: Int!
}

type PrismicGeoPointType {
	latitude: Float!
	longitude: Float!
}

type PrismicImageDimensionsType {
	height: Int!
	width: Int!
}

type PrismicImageThumbnailType {
	alt: String
	copyright: String
	dimensions: PrismicImageDimensionsType
	"Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
	fixed(
		"The fixed image height to render, in px."
		height: Int,
		"The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
		imgixParams: ImgixParamsInput = {},
		"Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
		placeholderImgixParams: ImgixParamsInput = {},
		"The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
		quality: Int,
		"The fixed image width to render, in px."
		width: Int = 8192
	): ImgixFixed
	"Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
	fluid(
		"The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
		imgixParams: ImgixParamsInput = {},
		"The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
		maxHeight: Int,
		"The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
		maxWidth: Int = 8192,
		"Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
		placeholderImgixParams: ImgixParamsInput = {},
		"A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
		srcSetBreakpoints: [Int]
	): ImgixFluid
	gatsbyImageData(
		"""

		If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
		If neither width or height is provided, height will be set based on the intrinsic width of the source image.
		"""
		aspectRatio: Float,
		"Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
		backgroundColor: String,
		"""

		Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
		based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
		It will never generate any images larger than the source.
		"""
		breakpoints: [Int],
		"If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
		height: Int,
		"""

		This argument is used to set parameters to instruct imgix to transform the image.

		All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
		"""
		imgixParams: ImgixParamsInput,
		"""

		The layout for the image.
		FIXED: A static image sized, that does not resize according to the screen width
		FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
		CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
		"""
		layout: GatsbyImageLayout,
		"""

		A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
		Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
		"""
		outputPixelDensities: [Float],
		"""

		Format of generated placeholder image, displayed while the main image loads.
		BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
		DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
		NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
		"""
		placeholder: ImgixPlaceholder,
		"""

		This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

		All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
		"""
		placeholderImgixParams: ImgixParamsInput,
		"""

		The "sizes" property, passed to the img tag. This describes the display size of the image.
		This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
		container will be the full width of the screen. In these cases we will generate an appropriate value.
		"""
		sizes: String,
		"This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
		srcSetMaxWidth: Int = 8192,
		"This argument determines the minimum srcset width that is generated. The default is 100px."
		srcSetMinWidth: Int = 100,
		"""

		The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
		The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
		Ignored if layout = FLUID.
		"""
		width: Int,
		"""

		This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

		By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
		"""
		widthTolerance: Float = 0.08
	): JSON
	localFile: File
	"A plain imgix URL with the URL and params applied."
	url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicLinkType {
	document: PrismicAllDocumentTypes
	id: ID
	isBroken: Boolean
	lang: String
	link_type: PrismicLinkTypeEnum
	localFile: File
	raw: JSON
	size: Int
	slug: String
	tags: [String]
	target: String
	type: String
	uid: String
	url: String
}

type PrismicPicture implements Node {
	_previewable: ID!
	alternate_languages: [PrismicAlternateLanguageType!]!
	children: [Node!]!
	data: PrismicPictureDataType!
	dataRaw: JSON!
	first_publication_date(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	href: String!
	id: ID!
	internal: Internal!
	lang: String!
	last_publication_date(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	parent: Node
	prismicId: ID!
	tags: [String!]!
	type: String!
	uid: String!
	url: String
}

type PrismicPictureConnection {
	distinct(field: PrismicPictureFieldSelector!): [String!]!
	edges: [PrismicPictureEdge!]!
	group(field: PrismicPictureFieldSelector!, limit: Int, skip: Int): [PrismicPictureGroupConnection!]!
	max(field: PrismicPictureFieldSelector!): Float
	min(field: PrismicPictureFieldSelector!): Float
	nodes: [PrismicPicture!]!
	pageInfo: PageInfo!
	sum(field: PrismicPictureFieldSelector!): Float
	totalCount: Int!
}

type PrismicPictureDataImageImageThumbnailsType {
	thumbnail: PrismicImageThumbnailType
}

type PrismicPictureDataImageImageType {
	alt: String
	copyright: String
	dimensions: PrismicImageDimensionsType
	"Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
	fixed(
		"The fixed image height to render, in px."
		height: Int,
		"The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
		imgixParams: ImgixParamsInput = {},
		"Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
		placeholderImgixParams: ImgixParamsInput = {},
		"The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
		quality: Int,
		"The fixed image width to render, in px."
		width: Int = 8192
	): ImgixFixed
	"Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
	fluid(
		"The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
		imgixParams: ImgixParamsInput = {},
		"The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
		maxHeight: Int,
		"The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
		maxWidth: Int = 8192,
		"Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
		placeholderImgixParams: ImgixParamsInput = {},
		"A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
		srcSetBreakpoints: [Int]
	): ImgixFluid
	gatsbyImageData(
		"""

		If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
		If neither width or height is provided, height will be set based on the intrinsic width of the source image.
		"""
		aspectRatio: Float,
		"Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
		backgroundColor: String,
		"""

		Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
		based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
		It will never generate any images larger than the source.
		"""
		breakpoints: [Int],
		"If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
		height: Int,
		"""

		This argument is used to set parameters to instruct imgix to transform the image.

		All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
		"""
		imgixParams: ImgixParamsInput,
		"""

		The layout for the image.
		FIXED: A static image sized, that does not resize according to the screen width
		FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
		CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
		"""
		layout: GatsbyImageLayout,
		"""

		A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
		Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
		"""
		outputPixelDensities: [Float],
		"""

		Format of generated placeholder image, displayed while the main image loads.
		BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
		DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
		NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
		"""
		placeholder: ImgixPlaceholder,
		"""

		This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

		All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
		"""
		placeholderImgixParams: ImgixParamsInput,
		"""

		The "sizes" property, passed to the img tag. This describes the display size of the image.
		This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
		container will be the full width of the screen. In these cases we will generate an appropriate value.
		"""
		sizes: String,
		"This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
		srcSetMaxWidth: Int = 8192,
		"This argument determines the minimum srcset width that is generated. The default is 100px."
		srcSetMinWidth: Int = 100,
		"""

		The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
		The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
		Ignored if layout = FLUID.
		"""
		width: Int,
		"""

		This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

		By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
		"""
		widthTolerance: Float = 0.08
	): JSON
	localFile: File
	thumbnails: PrismicPictureDataImageImageThumbnailsType
	"A plain imgix URL with the URL and params applied."
	url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicPictureDataTags {
	tag: PrismicLinkType
}

type PrismicPictureDataType {
	category: PrismicLinkType
	coordinates: PrismicGeoPointType
	datetime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date
	homepage: Boolean
	image: PrismicPictureDataImageImageType
	series: PrismicLinkType
	tags: [PrismicPictureDataTags]
	title: String
}

type PrismicPictureEdge {
	next: PrismicPicture
	node: PrismicPicture!
	previous: PrismicPicture
}

type PrismicPictureGroupConnection {
	distinct(field: PrismicPictureFieldSelector!): [String!]!
	edges: [PrismicPictureEdge!]!
	field: String!
	fieldValue: String
	group(field: PrismicPictureFieldSelector!, limit: Int, skip: Int): [PrismicPictureGroupConnection!]!
	max(field: PrismicPictureFieldSelector!): Float
	min(field: PrismicPictureFieldSelector!): Float
	nodes: [PrismicPicture!]!
	pageInfo: PageInfo!
	sum(field: PrismicPictureFieldSelector!): Float
	totalCount: Int!
}

type PrismicSeries implements Node {
	_previewable: ID!
	alternate_languages: [PrismicAlternateLanguageType!]!
	children: [Node!]!
	data: PrismicSeriesDataType!
	dataRaw: JSON!
	first_publication_date(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	href: String!
	id: ID!
	internal: Internal!
	lang: String!
	last_publication_date(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	parent: Node
	prismicId: ID!
	tags: [String!]!
	type: String!
	uid: String!
	url: String
}

type PrismicSeriesConnection {
	distinct(field: PrismicSeriesFieldSelector!): [String!]!
	edges: [PrismicSeriesEdge!]!
	group(field: PrismicSeriesFieldSelector!, limit: Int, skip: Int): [PrismicSeriesGroupConnection!]!
	max(field: PrismicSeriesFieldSelector!): Float
	min(field: PrismicSeriesFieldSelector!): Float
	nodes: [PrismicSeries!]!
	pageInfo: PageInfo!
	sum(field: PrismicSeriesFieldSelector!): Float
	totalCount: Int!
}

type PrismicSeriesDataType {
	title: String
}

type PrismicSeriesEdge {
	next: PrismicSeries
	node: PrismicSeries!
	previous: PrismicSeries
}

type PrismicSeriesGroupConnection {
	distinct(field: PrismicSeriesFieldSelector!): [String!]!
	edges: [PrismicSeriesEdge!]!
	field: String!
	fieldValue: String
	group(field: PrismicSeriesFieldSelector!, limit: Int, skip: Int): [PrismicSeriesGroupConnection!]!
	max(field: PrismicSeriesFieldSelector!): Float
	min(field: PrismicSeriesFieldSelector!): Float
	nodes: [PrismicSeries!]!
	pageInfo: PageInfo!
	sum(field: PrismicSeriesFieldSelector!): Float
	totalCount: Int!
}

type PrismicStructuredTextType {
	html: String
	raw: PrismicStructuredText! @deprecated(reason: "This field has been renamed to `richText`. The `richText` field has the same value the `raw` field.")
	richText: PrismicStructuredText!
	text: String
}

type PrismicTags implements Node {
	_previewable: ID!
	alternate_languages: [PrismicAlternateLanguageType!]!
	children: [Node!]!
	data: PrismicTagsDataType!
	dataRaw: JSON!
	first_publication_date(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	href: String!
	id: ID!
	internal: Internal!
	lang: String!
	last_publication_date(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	parent: Node
	prismicId: ID!
	tags: [String!]!
	type: String!
	uid: String!
	url: String
}

type PrismicTagsConnection {
	distinct(field: PrismicTagsFieldSelector!): [String!]!
	edges: [PrismicTagsEdge!]!
	group(field: PrismicTagsFieldSelector!, limit: Int, skip: Int): [PrismicTagsGroupConnection!]!
	max(field: PrismicTagsFieldSelector!): Float
	min(field: PrismicTagsFieldSelector!): Float
	nodes: [PrismicTags!]!
	pageInfo: PageInfo!
	sum(field: PrismicTagsFieldSelector!): Float
	totalCount: Int!
}

type PrismicTagsDataType {
	title: String
}

type PrismicTagsEdge {
	next: PrismicTags
	node: PrismicTags!
	previous: PrismicTags
}

type PrismicTagsGroupConnection {
	distinct(field: PrismicTagsFieldSelector!): [String!]!
	edges: [PrismicTagsEdge!]!
	field: String!
	fieldValue: String
	group(field: PrismicTagsFieldSelector!, limit: Int, skip: Int): [PrismicTagsGroupConnection!]!
	max(field: PrismicTagsFieldSelector!): Float
	min(field: PrismicTagsFieldSelector!): Float
	nodes: [PrismicTags!]!
	pageInfo: PageInfo!
	sum(field: PrismicTagsFieldSelector!): Float
	totalCount: Int!
}

type PrismicTypePathType implements Node {
	children: [Node!]!
	id: ID!
	internal: Internal!
	kind: String!
	parent: Node
	path: [String!]!
	type: String!
}

type PrismicTypePathTypeConnection {
	distinct(field: PrismicTypePathTypeFieldSelector!): [String!]!
	edges: [PrismicTypePathTypeEdge!]!
	group(field: PrismicTypePathTypeFieldSelector!, limit: Int, skip: Int): [PrismicTypePathTypeGroupConnection!]!
	max(field: PrismicTypePathTypeFieldSelector!): Float
	min(field: PrismicTypePathTypeFieldSelector!): Float
	nodes: [PrismicTypePathType!]!
	pageInfo: PageInfo!
	sum(field: PrismicTypePathTypeFieldSelector!): Float
	totalCount: Int!
}

type PrismicTypePathTypeEdge {
	next: PrismicTypePathType
	node: PrismicTypePathType!
	previous: PrismicTypePathType
}

type PrismicTypePathTypeGroupConnection {
	distinct(field: PrismicTypePathTypeFieldSelector!): [String!]!
	edges: [PrismicTypePathTypeEdge!]!
	field: String!
	fieldValue: String
	group(field: PrismicTypePathTypeFieldSelector!, limit: Int, skip: Int): [PrismicTypePathTypeGroupConnection!]!
	max(field: PrismicTypePathTypeFieldSelector!): Float
	min(field: PrismicTypePathTypeFieldSelector!): Float
	nodes: [PrismicTypePathType!]!
	pageInfo: PageInfo!
	sum(field: PrismicTypePathTypeFieldSelector!): Float
	totalCount: Int!
}

type Query {
	allDirectory(filter: DirectoryFilterInput, limit: Int, skip: Int, sort: [DirectorySortInput]): DirectoryConnection!
	allFile(filter: FileFilterInput, limit: Int, skip: Int, sort: [FileSortInput]): FileConnection!
	allPrismicCategory(filter: PrismicCategoryFilterInput, limit: Int, skip: Int, sort: [PrismicCategorySortInput]): PrismicCategoryConnection!
	allPrismicEmbedType(filter: PrismicEmbedTypeFilterInput, limit: Int, skip: Int, sort: [PrismicEmbedTypeSortInput]): PrismicEmbedTypeConnection!
	allPrismicPicture(filter: PrismicPictureFilterInput, limit: Int, skip: Int, sort: [PrismicPictureSortInput]): PrismicPictureConnection!
	allPrismicSeries(filter: PrismicSeriesFilterInput, limit: Int, skip: Int, sort: [PrismicSeriesSortInput]): PrismicSeriesConnection!
	allPrismicTags(filter: PrismicTagsFilterInput, limit: Int, skip: Int, sort: [PrismicTagsSortInput]): PrismicTagsConnection!
	allPrismicTypePathType(filter: PrismicTypePathTypeFilterInput, limit: Int, skip: Int, sort: [PrismicTypePathTypeSortInput]): PrismicTypePathTypeConnection!
	allSite(filter: SiteFilterInput, limit: Int, skip: Int, sort: [SiteSortInput]): SiteConnection!
	allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, limit: Int, skip: Int, sort: [SiteBuildMetadataSortInput]): SiteBuildMetadataConnection!
	allSiteFunction(filter: SiteFunctionFilterInput, limit: Int, skip: Int, sort: [SiteFunctionSortInput]): SiteFunctionConnection!
	allSitePage(filter: SitePageFilterInput, limit: Int, skip: Int, sort: [SitePageSortInput]): SitePageConnection!
	allSitePlugin(filter: SitePluginFilterInput, limit: Int, skip: Int, sort: [SitePluginSortInput]): SitePluginConnection!
	directory(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): Directory
	file(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): File
	prismicCategory(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicCategoryDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicCategory
	prismicEmbedType(children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput): PrismicEmbedType
	prismicPicture(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicPictureDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicPicture
	prismicSeries(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicSeriesDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicSeries
	prismicTags(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicTagsDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicTags
	prismicTypePathType(children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, kind: StringQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput, type: StringQueryOperatorInput): PrismicTypePathType
	site(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, flags: SiteFlagsFilterInput, graphqlTypegen: BooleanQueryOperatorInput, host: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, jsxImportSource: StringQueryOperatorInput, jsxRuntime: StringQueryOperatorInput, parent: NodeFilterInput, pathPrefix: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, port: IntQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput, trailingSlash: StringQueryOperatorInput): Site
	siteBuildMetadata(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput): SiteBuildMetadata
	siteFunction(absoluteCompiledFilePath: StringQueryOperatorInput, children: NodeFilterListInput, functionRoute: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, matchPath: StringQueryOperatorInput, originalAbsoluteFilePath: StringQueryOperatorInput, originalRelativeFilePath: StringQueryOperatorInput, parent: NodeFilterInput, pluginName: StringQueryOperatorInput, relativeCompiledFilePath: StringQueryOperatorInput): SiteFunction
	sitePage(children: NodeFilterListInput, component: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, internalComponentName: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, pageContext: JSONQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput, pluginCreator: SitePluginFilterInput): SitePage
	sitePlugin(browserAPIs: StringQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, nodeAPIs: StringQueryOperatorInput, packageJson: JSONQueryOperatorInput, parent: NodeFilterInput, pluginFilepath: StringQueryOperatorInput, pluginOptions: JSONQueryOperatorInput, resolve: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, version: StringQueryOperatorInput): SitePlugin
}

type Site implements Node {
	buildTime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date
	children: [Node!]!
	flags: SiteFlags
	graphqlTypegen: Boolean
	host: String
	id: ID!
	internal: Internal!
	jsxImportSource: String
	jsxRuntime: String
	parent: Node
	pathPrefix: String
	polyfill: Boolean
	port: Int
	siteMetadata: SiteSiteMetadata
	trailingSlash: String
}

type SiteBuildMetadata implements Node {
	buildTime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date
	children: [Node!]!
	id: ID!
	internal: Internal!
	parent: Node
}

type SiteBuildMetadataConnection {
	distinct(field: SiteBuildMetadataFieldSelector!): [String!]!
	edges: [SiteBuildMetadataEdge!]!
	group(field: SiteBuildMetadataFieldSelector!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
	max(field: SiteBuildMetadataFieldSelector!): Float
	min(field: SiteBuildMetadataFieldSelector!): Float
	nodes: [SiteBuildMetadata!]!
	pageInfo: PageInfo!
	sum(field: SiteBuildMetadataFieldSelector!): Float
	totalCount: Int!
}

type SiteBuildMetadataEdge {
	next: SiteBuildMetadata
	node: SiteBuildMetadata!
	previous: SiteBuildMetadata
}

type SiteBuildMetadataGroupConnection {
	distinct(field: SiteBuildMetadataFieldSelector!): [String!]!
	edges: [SiteBuildMetadataEdge!]!
	field: String!
	fieldValue: String
	group(field: SiteBuildMetadataFieldSelector!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
	max(field: SiteBuildMetadataFieldSelector!): Float
	min(field: SiteBuildMetadataFieldSelector!): Float
	nodes: [SiteBuildMetadata!]!
	pageInfo: PageInfo!
	sum(field: SiteBuildMetadataFieldSelector!): Float
	totalCount: Int!
}

type SiteConnection {
	distinct(field: SiteFieldSelector!): [String!]!
	edges: [SiteEdge!]!
	group(field: SiteFieldSelector!, limit: Int, skip: Int): [SiteGroupConnection!]!
	max(field: SiteFieldSelector!): Float
	min(field: SiteFieldSelector!): Float
	nodes: [Site!]!
	pageInfo: PageInfo!
	sum(field: SiteFieldSelector!): Float
	totalCount: Int!
}

type SiteEdge {
	next: Site
	node: Site!
	previous: Site
}

type SiteFlags {
	DEV_SSR: Boolean
	FAST_DEV: Boolean
}

type SiteFunction implements Node {
	absoluteCompiledFilePath: String!
	children: [Node!]!
	functionRoute: String!
	id: ID!
	internal: Internal!
	matchPath: String
	originalAbsoluteFilePath: String!
	originalRelativeFilePath: String!
	parent: Node
	pluginName: String!
	relativeCompiledFilePath: String!
}

type SiteFunctionConnection {
	distinct(field: SiteFunctionFieldSelector!): [String!]!
	edges: [SiteFunctionEdge!]!
	group(field: SiteFunctionFieldSelector!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
	max(field: SiteFunctionFieldSelector!): Float
	min(field: SiteFunctionFieldSelector!): Float
	nodes: [SiteFunction!]!
	pageInfo: PageInfo!
	sum(field: SiteFunctionFieldSelector!): Float
	totalCount: Int!
}

type SiteFunctionEdge {
	next: SiteFunction
	node: SiteFunction!
	previous: SiteFunction
}

type SiteFunctionGroupConnection {
	distinct(field: SiteFunctionFieldSelector!): [String!]!
	edges: [SiteFunctionEdge!]!
	field: String!
	fieldValue: String
	group(field: SiteFunctionFieldSelector!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
	max(field: SiteFunctionFieldSelector!): Float
	min(field: SiteFunctionFieldSelector!): Float
	nodes: [SiteFunction!]!
	pageInfo: PageInfo!
	sum(field: SiteFunctionFieldSelector!): Float
	totalCount: Int!
}

type SiteGroupConnection {
	distinct(field: SiteFieldSelector!): [String!]!
	edges: [SiteEdge!]!
	field: String!
	fieldValue: String
	group(field: SiteFieldSelector!, limit: Int, skip: Int): [SiteGroupConnection!]!
	max(field: SiteFieldSelector!): Float
	min(field: SiteFieldSelector!): Float
	nodes: [Site!]!
	pageInfo: PageInfo!
	sum(field: SiteFieldSelector!): Float
	totalCount: Int!
}

type SitePage implements Node {
	children: [Node!]!
	component: String!
	componentChunkName: String!
	id: ID!
	internal: Internal!
	internalComponentName: String!
	matchPath: String
	pageContext: JSON
	parent: Node
	path: String!
	pluginCreator: SitePlugin
}

type SitePageConnection {
	distinct(field: SitePageFieldSelector!): [String!]!
	edges: [SitePageEdge!]!
	group(field: SitePageFieldSelector!, limit: Int, skip: Int): [SitePageGroupConnection!]!
	max(field: SitePageFieldSelector!): Float
	min(field: SitePageFieldSelector!): Float
	nodes: [SitePage!]!
	pageInfo: PageInfo!
	sum(field: SitePageFieldSelector!): Float
	totalCount: Int!
}

type SitePageEdge {
	next: SitePage
	node: SitePage!
	previous: SitePage
}

type SitePageGroupConnection {
	distinct(field: SitePageFieldSelector!): [String!]!
	edges: [SitePageEdge!]!
	field: String!
	fieldValue: String
	group(field: SitePageFieldSelector!, limit: Int, skip: Int): [SitePageGroupConnection!]!
	max(field: SitePageFieldSelector!): Float
	min(field: SitePageFieldSelector!): Float
	nodes: [SitePage!]!
	pageInfo: PageInfo!
	sum(field: SitePageFieldSelector!): Float
	totalCount: Int!
}

type SitePlugin implements Node {
	browserAPIs: [String]
	children: [Node!]!
	id: ID!
	internal: Internal!
	name: String
	nodeAPIs: [String]
	packageJson: JSON
	parent: Node
	pluginFilepath: String
	pluginOptions: JSON
	resolve: String
	ssrAPIs: [String]
	version: String
}

type SitePluginConnection {
	distinct(field: SitePluginFieldSelector!): [String!]!
	edges: [SitePluginEdge!]!
	group(field: SitePluginFieldSelector!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
	max(field: SitePluginFieldSelector!): Float
	min(field: SitePluginFieldSelector!): Float
	nodes: [SitePlugin!]!
	pageInfo: PageInfo!
	sum(field: SitePluginFieldSelector!): Float
	totalCount: Int!
}

type SitePluginEdge {
	next: SitePlugin
	node: SitePlugin!
	previous: SitePlugin
}

type SitePluginGroupConnection {
	distinct(field: SitePluginFieldSelector!): [String!]!
	edges: [SitePluginEdge!]!
	field: String!
	fieldValue: String
	group(field: SitePluginFieldSelector!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
	max(field: SitePluginFieldSelector!): Float
	min(field: SitePluginFieldSelector!): Float
	nodes: [SitePlugin!]!
	pageInfo: PageInfo!
	sum(field: SitePluginFieldSelector!): Float
	totalCount: Int!
}

type SiteSiteMetadata {
	description: String
	siteUrl: String
	title: String
}

enum FieldSelectorEnum {
	SELECT
}

enum GatsbyImageFormat {
	AUTO
	AVIF
	JPG
	NO_CHANGE
	PNG
	WEBP
}

enum GatsbyImageLayout {
	CONSTRAINED
	FIXED
	FULL_WIDTH
}

enum GatsbyImagePlaceholder {
	BLURRED
	DOMINANT_COLOR
	NONE
	TRACED_SVG
}

enum ImgixPlaceholder {
	BLURRED
	DOMINANT_COLOR
	NONE
}

enum PrismicLinkTypeEnum {
	Any
	Document
	Media
	Web
}

enum SortOrderEnum {
	ASC
	DESC
}

"A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"Text content with rich formatting capabilities using a Prismic format called Structured Text."
scalar PrismicStructuredText

input BooleanQueryOperatorInput {
	eq: Boolean
	in: [Boolean]
	ne: Boolean
	nin: [Boolean]
}

input DateQueryOperatorInput {
	eq: Date
	gt: Date
	gte: Date
	in: [Date]
	lt: Date
	lte: Date
	ne: Date
	nin: [Date]
}

input DirectoryFieldSelector {
	absolutePath: FieldSelectorEnum
	accessTime: FieldSelectorEnum
	atime: FieldSelectorEnum
	atimeMs: FieldSelectorEnum
	base: FieldSelectorEnum
	birthTime: FieldSelectorEnum
	birthtime: FieldSelectorEnum
	birthtimeMs: FieldSelectorEnum
	changeTime: FieldSelectorEnum
	children: NodeFieldSelector
	ctime: FieldSelectorEnum
	ctimeMs: FieldSelectorEnum
	dev: FieldSelectorEnum
	dir: FieldSelectorEnum
	ext: FieldSelectorEnum
	extension: FieldSelectorEnum
	gid: FieldSelectorEnum
	id: FieldSelectorEnum
	ino: FieldSelectorEnum
	internal: InternalFieldSelector
	mode: FieldSelectorEnum
	modifiedTime: FieldSelectorEnum
	mtime: FieldSelectorEnum
	mtimeMs: FieldSelectorEnum
	name: FieldSelectorEnum
	nlink: FieldSelectorEnum
	parent: NodeFieldSelector
	prettySize: FieldSelectorEnum
	rdev: FieldSelectorEnum
	relativeDirectory: FieldSelectorEnum
	relativePath: FieldSelectorEnum
	root: FieldSelectorEnum
	size: FieldSelectorEnum
	sourceInstanceName: FieldSelectorEnum
	uid: FieldSelectorEnum
}

input DirectoryFilterInput {
	absolutePath: StringQueryOperatorInput
	accessTime: DateQueryOperatorInput
	atime: DateQueryOperatorInput
	atimeMs: FloatQueryOperatorInput
	base: StringQueryOperatorInput
	birthTime: DateQueryOperatorInput
	birthtime: DateQueryOperatorInput
	birthtimeMs: FloatQueryOperatorInput
	changeTime: DateQueryOperatorInput
	children: NodeFilterListInput
	ctime: DateQueryOperatorInput
	ctimeMs: FloatQueryOperatorInput
	dev: IntQueryOperatorInput
	dir: StringQueryOperatorInput
	ext: StringQueryOperatorInput
	extension: StringQueryOperatorInput
	gid: IntQueryOperatorInput
	id: StringQueryOperatorInput
	ino: FloatQueryOperatorInput
	internal: InternalFilterInput
	mode: IntQueryOperatorInput
	modifiedTime: DateQueryOperatorInput
	mtime: DateQueryOperatorInput
	mtimeMs: FloatQueryOperatorInput
	name: StringQueryOperatorInput
	nlink: IntQueryOperatorInput
	parent: NodeFilterInput
	prettySize: StringQueryOperatorInput
	rdev: IntQueryOperatorInput
	relativeDirectory: StringQueryOperatorInput
	relativePath: StringQueryOperatorInput
	root: StringQueryOperatorInput
	size: IntQueryOperatorInput
	sourceInstanceName: StringQueryOperatorInput
	uid: IntQueryOperatorInput
}

input DirectorySortInput {
	absolutePath: SortOrderEnum
	accessTime: SortOrderEnum
	atime: SortOrderEnum
	atimeMs: SortOrderEnum
	base: SortOrderEnum
	birthTime: SortOrderEnum
	birthtime: SortOrderEnum
	birthtimeMs: SortOrderEnum
	changeTime: SortOrderEnum
	children: NodeSortInput
	ctime: SortOrderEnum
	ctimeMs: SortOrderEnum
	dev: SortOrderEnum
	dir: SortOrderEnum
	ext: SortOrderEnum
	extension: SortOrderEnum
	gid: SortOrderEnum
	id: SortOrderEnum
	ino: SortOrderEnum
	internal: InternalSortInput
	mode: SortOrderEnum
	modifiedTime: SortOrderEnum
	mtime: SortOrderEnum
	mtimeMs: SortOrderEnum
	name: SortOrderEnum
	nlink: SortOrderEnum
	parent: NodeSortInput
	prettySize: SortOrderEnum
	rdev: SortOrderEnum
	relativeDirectory: SortOrderEnum
	relativePath: SortOrderEnum
	root: SortOrderEnum
	size: SortOrderEnum
	sourceInstanceName: SortOrderEnum
	uid: SortOrderEnum
}

input FileFieldSelector {
	absolutePath: FieldSelectorEnum
	accessTime: FieldSelectorEnum
	atime: FieldSelectorEnum
	atimeMs: FieldSelectorEnum
	base: FieldSelectorEnum
	birthTime: FieldSelectorEnum
	birthtime: FieldSelectorEnum
	birthtimeMs: FieldSelectorEnum
	changeTime: FieldSelectorEnum
	children: NodeFieldSelector
	ctime: FieldSelectorEnum
	ctimeMs: FieldSelectorEnum
	dev: FieldSelectorEnum
	dir: FieldSelectorEnum
	ext: FieldSelectorEnum
	extension: FieldSelectorEnum
	gid: FieldSelectorEnum
	id: FieldSelectorEnum
	ino: FieldSelectorEnum
	internal: InternalFieldSelector
	mode: FieldSelectorEnum
	modifiedTime: FieldSelectorEnum
	mtime: FieldSelectorEnum
	mtimeMs: FieldSelectorEnum
	name: FieldSelectorEnum
	nlink: FieldSelectorEnum
	parent: NodeFieldSelector
	prettySize: FieldSelectorEnum
	rdev: FieldSelectorEnum
	relativeDirectory: FieldSelectorEnum
	relativePath: FieldSelectorEnum
	root: FieldSelectorEnum
	size: FieldSelectorEnum
	sourceInstanceName: FieldSelectorEnum
	uid: FieldSelectorEnum
}

input FileFilterInput {
	absolutePath: StringQueryOperatorInput
	accessTime: DateQueryOperatorInput
	atime: DateQueryOperatorInput
	atimeMs: FloatQueryOperatorInput
	base: StringQueryOperatorInput
	birthTime: DateQueryOperatorInput
	birthtime: DateQueryOperatorInput
	birthtimeMs: FloatQueryOperatorInput
	changeTime: DateQueryOperatorInput
	children: NodeFilterListInput
	ctime: DateQueryOperatorInput
	ctimeMs: FloatQueryOperatorInput
	dev: IntQueryOperatorInput
	dir: StringQueryOperatorInput
	ext: StringQueryOperatorInput
	extension: StringQueryOperatorInput
	gid: IntQueryOperatorInput
	id: StringQueryOperatorInput
	ino: FloatQueryOperatorInput
	internal: InternalFilterInput
	mode: IntQueryOperatorInput
	modifiedTime: DateQueryOperatorInput
	mtime: DateQueryOperatorInput
	mtimeMs: FloatQueryOperatorInput
	name: StringQueryOperatorInput
	nlink: IntQueryOperatorInput
	parent: NodeFilterInput
	prettySize: StringQueryOperatorInput
	rdev: IntQueryOperatorInput
	relativeDirectory: StringQueryOperatorInput
	relativePath: StringQueryOperatorInput
	root: StringQueryOperatorInput
	size: IntQueryOperatorInput
	sourceInstanceName: StringQueryOperatorInput
	uid: IntQueryOperatorInput
}

input FileSortInput {
	absolutePath: SortOrderEnum
	accessTime: SortOrderEnum
	atime: SortOrderEnum
	atimeMs: SortOrderEnum
	base: SortOrderEnum
	birthTime: SortOrderEnum
	birthtime: SortOrderEnum
	birthtimeMs: SortOrderEnum
	changeTime: SortOrderEnum
	children: NodeSortInput
	ctime: SortOrderEnum
	ctimeMs: SortOrderEnum
	dev: SortOrderEnum
	dir: SortOrderEnum
	ext: SortOrderEnum
	extension: SortOrderEnum
	gid: SortOrderEnum
	id: SortOrderEnum
	ino: SortOrderEnum
	internal: InternalSortInput
	mode: SortOrderEnum
	modifiedTime: SortOrderEnum
	mtime: SortOrderEnum
	mtimeMs: SortOrderEnum
	name: SortOrderEnum
	nlink: SortOrderEnum
	parent: NodeSortInput
	prettySize: SortOrderEnum
	rdev: SortOrderEnum
	relativeDirectory: SortOrderEnum
	relativePath: SortOrderEnum
	root: SortOrderEnum
	size: SortOrderEnum
	sourceInstanceName: SortOrderEnum
	uid: SortOrderEnum
}

input FloatQueryOperatorInput {
	eq: Float
	gt: Float
	gte: Float
	in: [Float]
	lt: Float
	lte: Float
	ne: Float
	nin: [Float]
}

input IDQueryOperatorInput {
	eq: ID
	in: [ID]
	ne: ID
	nin: [ID]
}

input ImgixFixedFieldSelector {
	base64: FieldSelectorEnum
	height: FieldSelectorEnum
	sizes: FieldSelectorEnum
	src: FieldSelectorEnum
	srcSet: FieldSelectorEnum
	srcSetWebp: FieldSelectorEnum
	srcWebp: FieldSelectorEnum
	width: FieldSelectorEnum
}

input ImgixFixedFilterInput {
	base64: StringQueryOperatorInput
	height: IntQueryOperatorInput
	sizes: StringQueryOperatorInput
	src: StringQueryOperatorInput
	srcSet: StringQueryOperatorInput
	srcSetWebp: StringQueryOperatorInput
	srcWebp: StringQueryOperatorInput
	width: IntQueryOperatorInput
}

input ImgixFixedSortInput {
	base64: SortOrderEnum
	height: SortOrderEnum
	sizes: SortOrderEnum
	src: SortOrderEnum
	srcSet: SortOrderEnum
	srcSetWebp: SortOrderEnum
	srcWebp: SortOrderEnum
	width: SortOrderEnum
}

input ImgixFluidFieldSelector {
	aspectRatio: FieldSelectorEnum
	base64: FieldSelectorEnum
	sizes: FieldSelectorEnum
	src: FieldSelectorEnum
	srcSet: FieldSelectorEnum
	srcSetWebp: FieldSelectorEnum
	srcWebp: FieldSelectorEnum
}

input ImgixFluidFilterInput {
	aspectRatio: FloatQueryOperatorInput
	base64: StringQueryOperatorInput
	sizes: StringQueryOperatorInput
	src: StringQueryOperatorInput
	srcSet: StringQueryOperatorInput
	srcSetWebp: StringQueryOperatorInput
	srcWebp: StringQueryOperatorInput
}

input ImgixFluidSortInput {
	aspectRatio: SortOrderEnum
	base64: SortOrderEnum
	sizes: SortOrderEnum
	src: SortOrderEnum
	srcSet: SortOrderEnum
	srcSetWebp: SortOrderEnum
	srcWebp: SortOrderEnum
}

input ImgixParamsInput {
	"Alias for `pdfAnnotation`."
	annotation: Boolean
	"Specifies an aspect ratio to maintain when resizing and cropping the image. [See docs](https://docs.imgix.com/apis/url/size/ar)."
	ar: String
	"Applies automatic enhancements to images. [See docs](https://docs.imgix.com/apis/url/auto)."
	auto: String
	"Alias for `blend`."
	b: String
	"Alias for `blendAlign`."
	ba: String
	"Alias for `blendAlpha`."
	balph: Int
	"Alias for `blendCrop`."
	bc: String
	"Alias for `blendFit`."
	bf: String
	"Colors the background of padded and partially-transparent images. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/bg)."
	bg: String
	"Alias for `blendH`."
	bh: Float
	"Specifies the location of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend)."
	blend: String
	"Changes the blend alignment relative to the parent image. [See docs](https://docs.imgix.com/apis/url/blending/blend-align)."
	blendAlign: String
	"Changes the alpha of the blend image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/blending/blend-alpha)."
	blendAlpha: Int
	"Alias for `blendColor`."
	blendClr: String
	"Specifies a color to use when applying the blend. [See docs](https://docs.imgix.com/apis/url/blending/blend-color)."
	blendColor: String
	"Specifies the type of crop for blend images. [See docs](https://docs.imgix.com/apis/url/blending/blend-crop)."
	blendCrop: String
	"Specifies the fit mode for blend images. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/blending/blend-fit)."
	blendFit: String
	"Adjusts the height of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-h)."
	blendH: Float
	"Sets the blend mode for a blend image. Default: `overlay`. [See docs](https://docs.imgix.com/apis/url/blending/blend-mode)."
	blendMode: String
	"Applies padding to the blend image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-pad)."
	blendPad: Int
	"Adjusts the size of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-size)."
	blendSize: String
	"Adjusts the width of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-w)."
	blendW: Float
	"Adjusts the x-offset of the blend image relative to its parent. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-x)."
	blendX: Int
	"Adjusts the y-offset of the blend image relative to its parent. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-y)."
	blendY: Int
	"Alias for `blendAlign`."
	blendalign: String
	"Alias for `blendAlpha`."
	blendalpha: Int
	"Alias for `blendColor`."
	blendclr: String
	"Alias for `blendColor`."
	blendcolor: String
	"Alias for `blendCrop`."
	blendcrop: String
	"Alias for `blendFit`."
	blendfit: String
	"Alias for `blendH`."
	blendh: Float
	"Alias for `blendMode`."
	blendmode: String
	"Alias for `blendPad`."
	blendpad: Int
	"Alias for `blendSize`."
	blendsize: String
	"Alias for `blendW`."
	blendw: Float
	"Alias for `blendX`."
	blendx: Int
	"Alias for `blendY`."
	blendy: Int
	"Applies a gaussian blur to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/blur)."
	blur: Int
	"Alias for `blendMode`."
	bm: String
	"Applies a border to an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border)."
	border: String
	"Sets bottom border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-bottom)."
	borderBottom: Int
	"Sets left border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-left)."
	borderLeft: Int
	"Sets the outer radius of the image's border in pixels. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-radius)."
	borderRadius: String
	"Sets the inner radius of the image's border in pixels. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-radius-inner)."
	borderRadiusInner: String
	"Sets right border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-right)."
	borderRight: Int
	"Sets top border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-top)."
	borderTop: Int
	"Alias for `blendPad`."
	bp: Int
	"Adjusts the brightness of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/bri)."
	bri: Int
	"Alias for `blendSize`."
	bs: String
	"Alias for `blendW`."
	bw: Float
	"Alias for `blendX`."
	bx: Int
	"Alias for `blendY`."
	by: Int
	"Sets one or more Client-Hints headers. [See docs](https://docs.imgix.com/apis/url/format/ch)."
	ch: String
	"Specifies the output chroma subsampling rate. Default: `420`. [See docs](https://docs.imgix.com/apis/url/format/chromasub)."
	chromasub: Int
	"Limits the number of unique colors in an image. [See docs](https://docs.imgix.com/apis/url/format/colorquant)."
	colorquant: Int
	"Specifies how many colors to include in a palette-extraction response. Default: `6`. [See docs](https://docs.imgix.com/apis/url/color-palette/colors)."
	colors: Int
	"Adjusts the contrast of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/con)."
	con: Int
	"Specifies the radius value for a rounded corner mask. [See docs](https://docs.imgix.com/apis/url/mask/corner-radius)."
	cornerRadius: String
	"Specifies how to crop an image. [See docs](https://docs.imgix.com/apis/url/size/crop)."
	crop: String
	"Specifies the color space of the output image. [See docs](https://docs.imgix.com/apis/url/format/cs)."
	cs: String
	"Forces a URL to use send-file in its response. [See docs](https://docs.imgix.com/apis/url/format/dl)."
	dl: String
	"Sets the DPI value in the EXIF header. [See docs](https://docs.imgix.com/apis/url/format/dpi)."
	dpi: Int
	"Adjusts the device-pixel ratio of the output image. Default: `1`. [See docs](https://docs.imgix.com/apis/url/dpr)."
	dpr: Float
	"Applies a duotone effect to the source image. [See docs](https://docs.imgix.com/apis/url/stylize/duotone)."
	duotone: String
	"Changes the alpha of the duotone effect atop the source image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/stylize/duotone-alpha)."
	duotoneAlpha: Int
	"Adjusts the exposure of the output image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/exp)."
	exp: Int
	"A Unix timestamp specifying a UTC time. Requests made to this URL after that time will output a 404 status code. [See docs](https://docs.imgix.com/apis/url/expires)."
	expires: String
	"Alias for `fit`."
	f: String
	"Selects a face to crop to. [See docs](https://docs.imgix.com/apis/url/face-detection/faceindex)."
	faceindex: Int
	"Adjusts padding around a selected face. Default: `1`. [See docs](https://docs.imgix.com/apis/url/face-detection/facepad)."
	facepad: Float
	"Specifies that face data should be included in output when combined with `fm=json`. [See docs](https://docs.imgix.com/apis/url/face-detection/faces)."
	faces: Int
	"Determines how to fill in additional space created by the fit setting. [See docs](https://docs.imgix.com/apis/url/fill/fill)."
	fill: String
	"Sets the fill color for images with additional space created by the fit setting. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/fill/fill-color)."
	fillColor: String
	"Alias for `fillColor`."
	fillcolor: String
	"Specifies how to map the source image to the output image dimensions. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/size/fit)."
	fit: String
	"Flips an image on a specified axis. [See docs](https://docs.imgix.com/apis/url/rotation/flip)."
	flip: String
	"Changes the format of the output image. [See docs](https://docs.imgix.com/apis/url/format/fm)."
	fm: String
	"Displays crosshairs identifying the location of the set focal point. Default: `false`. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-debug)."
	fpDebug: Boolean
	"Sets the relative horizontal value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-x)."
	fpX: Float
	"Sets the relative vertical value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-y)."
	fpY: Float
	"Sets the relative zoom value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-z)."
	fpZ: Float
	"Adjusts the gamma of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/gam)."
	gam: Int
	"Sets grid colors for the transparency checkerboard grid."
	gridColors: String
	"Sets grid size for the transparency checkerboard grid."
	gridSize: Int
	"Adjusts the height of the output image. [See docs](https://docs.imgix.com/apis/url/size/h)."
	h: Float
	"Alias for `h`."
	height: Float
	"Adjusts the highlights of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/high)."
	high: Int
	"Applies a half-tone effect to the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/htn)."
	htn: Int
	"Adjusts the hue of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/hue)."
	hue: Int
	"Alias for `invert`."
	inv: Boolean
	"Inverts the colors on the source image. Default: `false`. [See docs](https://docs.imgix.com/apis/url/adjustment/invert)."
	invert: Boolean
	"Determine if IPTC data should be passed for JPEG images."
	iptc: String
	"Specifies that the output image should be a lossless variant. Default: `false`. [See docs](https://docs.imgix.com/apis/url/format/lossless)."
	lossless: Boolean
	"Alias for `mark`."
	m: String
	"Alias for `markAlign`."
	ma: String
	"Alias for `markAlpha`."
	malph: Int
	"Specifies the location of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark)."
	mark: String
	"Changes the watermark alignment relative to the parent image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-align)."
	markAlign: String
	"Changes the alpha of the watermark image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-alpha)."
	markAlpha: Int
	"Changes base URL of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-base)."
	markBase: String
	"Specifies the fit mode for watermark images. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-fit)."
	markFit: String
	"Adjusts the height of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-h)."
	markH: Float
	"Applies padding to the watermark image. Default: `5`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-pad)."
	markPad: Int
	"Rotates a watermark or tiled watermarks by a specified number of degrees. Default: `0`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-rot)."
	markRot: Float
	"Adjusts the scale of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-scale)."
	markScale: Int
	"Adds tiled watermark. [See docs](https://docs.imgix.com/apis/url/watermark/mark-tile)."
	markTile: String
	"Adjusts the width of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-w)."
	markW: Float
	"Adjusts the x-offset of the watermark image relative to its parent. [See docs](https://docs.imgix.com/apis/url/watermark/mark-x)."
	markX: Int
	"Adjusts the y-offset of the watermark image relative to its parent. [See docs](https://docs.imgix.com/apis/url/watermark/mark-y)."
	markY: Int
	"Alias for `markAlign`."
	markalign: String
	"Alias for `markAlpha`."
	markalpha: Int
	"Alias for `markBase`."
	markbase: String
	"Alias for `markFit`."
	markfit: String
	"Alias for `markH`."
	markh: Float
	"Alias for `markPad`."
	markpad: Int
	"Alias for `markScale`."
	markscale: Int
	"Alias for `markTile`."
	marktile: String
	"Alias for `markW`."
	markw: Float
	"Alias for `markX`."
	markx: Int
	"Alias for `markY`."
	marky: Int
	"Defines the type of mask and specifies the URL if that type is selected. [See docs](https://docs.imgix.com/apis/url/mask)."
	mask: String
	"Colors the background of the transparent mask area of images. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/mask/mask-bg)."
	maskBg: String
	"Alias for `maskBg`."
	maskbg: String
	"Specifies the maximum height of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/max-height)."
	maxH: Int
	"Alias for `maxH`."
	maxHeight: Int
	"Specifies the maximum width of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/max-width)."
	maxW: Int
	"Alias for `maxW`."
	maxWidth: Int
	"Alias for `markBase`."
	mb: String
	"Alias for `markFit`."
	mf: String
	"Alias for `markH`."
	mh: Float
	"Specifies the minimum height of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/min-height)."
	minH: Int
	"Alias for `minH`."
	minHeight: Int
	"Specifies the minimum width of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/min-width)."
	minW: Int
	"Alias for `minW`."
	minWidth: Int
	"Alias for `monochrome`."
	mono: String
	"Applies a monochrome effect to the source image. [See docs](https://docs.imgix.com/apis/url/stylize/monochrome)."
	monochrome: String
	"Alias for `markPad`."
	mp: Int
	"Alias for `markScale`."
	ms: Int
	"Alias for `markTile`."
	mtile: String
	"Alias for `markW`."
	mw: Float
	"Alias for `markX`."
	mx: Int
	"Alias for `markY`."
	my: Int
	"Reduces the noise in an image. Default: `20`. [See docs](https://docs.imgix.com/apis/url/noise-reduction/nr)."
	nr: Int
	"Provides a threshold by which to sharpen an image. Default: `20`. [See docs](https://docs.imgix.com/apis/url/noise-reduction/nrs)."
	nrs: Int
	"Alias for `orient`."
	or: Int
	"Changes the image orientation. [See docs](https://docs.imgix.com/apis/url/rotation/orient)."
	orient: Int
	"Pads an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad)."
	pad: Int
	"Sets bottom padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-bottom)."
	padBottom: Int
	"Sets left padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-left)."
	padLeft: Int
	"Sets right padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-right)."
	padRight: Int
	"Sets top padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-top)."
	padTop: Int
	"Selects a page from a PDF for display. Default: `1`. [See docs](https://docs.imgix.com/apis/url/pdf/page)."
	page: Int
	"Specifies an output format for palette-extraction. [See docs](https://docs.imgix.com/apis/url/color-palette/palette)."
	palette: String
	"Enables or disables PDF annotation. Default: `true`. [See docs](https://docs.imgix.com/apis/url/pdf/pdf-annotation)."
	pdfAnnotation: Boolean
	"Specifies a CSS prefix for all classes in palette-extraction. Default: `image`. [See docs](https://docs.imgix.com/apis/url/color-palette/prefix)."
	prefix: String
	"Applies a pixelation effect to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/px)."
	px: Int
	"Adjusts the quality of an output image. Default: `75`. [See docs](https://docs.imgix.com/apis/url/format/q)."
	q: Int
	"Crops an image to a specified rectangle. [See docs](https://docs.imgix.com/apis/url/size/rect)."
	rect: String
	"Rotates an image by a specified number of degrees. Default: `0`. [See docs](https://docs.imgix.com/apis/url/rotation/rot)."
	rot: Float
	"Adjusts the saturation of an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/sat)."
	sat: Int
	"Applies a sepia effect to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/sepia)."
	sepia: Int
	"Adjusts the highlights of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/shad)."
	shad: Float
	"Adjusts the sharpness of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/sharp)."
	sharp: Float
	"Alias for `txt`."
	t: String
	"Alias for `txtAlign`."
	ta: String
	"Alias for `txtColor`."
	tc: String
	"Alias for `txtClip`."
	tcl: String
	"Alias for `txtFont`."
	tf: String
	"Alias for `txtLine`."
	tl: Int
	"Alias for `txtPad`."
	tp: Int
	"Adds checkerboard behind images which support transparency. [See docs](https://docs.imgix.com/apis/url/fill/transparency)."
	transparency: String
	"Trims the source image. [See docs](https://docs.imgix.com/apis/url/trim/trim)."
	trim: String
	"Specifies a trim color on a trim operation. [See docs](https://docs.imgix.com/apis/url/trim/trim-color)."
	trimColor: String
	"Specifies the mean difference on a trim operation. Default: `11`. [See docs](https://docs.imgix.com/apis/url/trim/trim-md)."
	trimMd: Float
	"Pads the area of the source image before trimming. Default: `0`. [See docs](https://docs.imgix.com/apis/url/trim/trim-pad)."
	trimPad: Int
	"Specifies the standard deviation on a trim operation. Default: `10`. [See docs](https://docs.imgix.com/apis/url/trim/trim-sd)."
	trimSd: Float
	"Specifies the tolerance on a trim operation. Default: `0`. [See docs](https://docs.imgix.com/apis/url/trim/trim-tol)."
	trimTol: Float
	"Alias for `trimColor`."
	trimcolor: String
	"Alias for `trimMd`."
	trimmd: Float
	"Alias for `trimPad`."
	trimpad: Int
	"Alias for `trimSd`."
	trimsd: Float
	"Alias for `trimTol`."
	trimtol: Float
	"Alias for `txtShad`."
	tsh: Float
	"Alias for `txtSize`."
	tsz: Int
	"Alias for `txtTrack`."
	tt: Int
	"Sets the text string to render. [See docs](https://docs.imgix.com/apis/url/text/txt)."
	txt: String
	"Sets the vertical and horizontal alignment of rendered text relative to the base image. [See docs](https://docs.imgix.com/apis/url/text/txt-align)."
	txtAlign: String
	"Sets the clipping properties of rendered text. Default: `end`. [See docs](https://docs.imgix.com/apis/url/text/txt-clip)."
	txtClip: String
	"Alias for `txtColor`."
	txtClr: String
	"Specifies the color of rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-color)."
	txtColor: String
	"Specifies the fit approach for rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-fit)."
	txtFit: String
	"Selects a font for rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-font)."
	txtFont: String
	"Sets the leading (line spacing) for rendered text. Only works on the multi-line text endpoint. Default: `0`. [See docs](https://docs.imgix.com/apis/url/typesetting/txt-lead)."
	txtLead: Int
	"Controls the level of ligature substitution. [See docs](https://docs.imgix.com/apis/url/text/txt-lig)."
	txtLig: Int
	"Outlines the rendered text with a specified color. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-line)."
	txtLine: Int
	"Alias for `txtLineColor`."
	txtLineClr: String
	"Specifies a text outline color. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/text/txt-line-color)."
	txtLineColor: String
	"Specifies the padding (in device-independent pixels) between a textbox and the edges of the base image. [See docs](https://docs.imgix.com/apis/url/text/txt-pad)."
	txtPad: Int
	"Applies a shadow to rendered text. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-shad)."
	txtShad: Float
	"Sets the font size of rendered text. Default: `12`. [See docs](https://docs.imgix.com/apis/url/text/txt-size)."
	txtSize: Int
	"Sets the tracking (letter spacing) for rendered text. Only works on the multi-line text endpoint. Default: `0`. [See docs](https://docs.imgix.com/apis/url/typesetting/txt-track)."
	txtTrack: Int
	"Sets the width of rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-width)."
	txtWidth: Int
	"Sets the horizontal (x) position of the text in pixels relative to the left edge of the base image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-x)."
	txtX: Int
	"Sets the vertical (y) position of the text in pixels relative to the top edge of the base image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-y)."
	txtY: Int
	"Alias for `txtAlign`."
	txtalign: String
	"Alias for `txtClip`."
	txtclip: String
	"Alias for `txtColor`."
	txtclr: String
	"Alias for `txtColor`."
	txtcolor: String
	"Alias for `txtFit`."
	txtfit: String
	"Alias for `txtFont`."
	txtfont: String
	"Alias for `txtLead`."
	txtlead: Int
	"Alias for `txtLig`."
	txtlig: Int
	"Alias for `txtLine`."
	txtline: Int
	"Alias for `txtLineColor`."
	txtlineclr: String
	"Alias for `txtLineColor`."
	txtlinecolor: String
	"Alias for `txtPad`."
	txtpad: Int
	"Alias for `txtShad`."
	txtshad: Float
	"Alias for `txtSize`."
	txtsize: Int
	"Alias for `txtTrack`."
	txttrack: Int
	"Alias for `txtWidth`."
	txtwidth: Int
	"Alias for `txtX`."
	txtx: Int
	"Alias for `txtY`."
	txty: Int
	"Sharpens the source image using an unsharp mask. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/usm)."
	usm: Int
	"Specifies the radius for an unsharp mask operation. Default: `2.5`. [See docs](https://docs.imgix.com/apis/url/adjustment/usmrad)."
	usmrad: Float
	"Adjusts the vibrance of an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/vib)."
	vib: Int
	"Adjusts the width of the output image. [See docs](https://docs.imgix.com/apis/url/size/w)."
	w: Float
	"Alias for `w`."
	width: Float
}

input IntQueryOperatorInput {
	eq: Int
	gt: Int
	gte: Int
	in: [Int]
	lt: Int
	lte: Int
	ne: Int
	nin: [Int]
}

input InternalFieldSelector {
	content: FieldSelectorEnum
	contentDigest: FieldSelectorEnum
	contentFilePath: FieldSelectorEnum
	description: FieldSelectorEnum
	fieldOwners: FieldSelectorEnum
	ignoreType: FieldSelectorEnum
	mediaType: FieldSelectorEnum
	owner: FieldSelectorEnum
	type: FieldSelectorEnum
}

input InternalFilterInput {
	content: StringQueryOperatorInput
	contentDigest: StringQueryOperatorInput
	contentFilePath: StringQueryOperatorInput
	description: StringQueryOperatorInput
	fieldOwners: StringQueryOperatorInput
	ignoreType: BooleanQueryOperatorInput
	mediaType: StringQueryOperatorInput
	owner: StringQueryOperatorInput
	type: StringQueryOperatorInput
}

input InternalSortInput {
	content: SortOrderEnum
	contentDigest: SortOrderEnum
	contentFilePath: SortOrderEnum
	description: SortOrderEnum
	fieldOwners: SortOrderEnum
	ignoreType: SortOrderEnum
	mediaType: SortOrderEnum
	owner: SortOrderEnum
	type: SortOrderEnum
}

input JSONQueryOperatorInput {
	eq: JSON
	glob: JSON
	in: [JSON]
	ne: JSON
	nin: [JSON]
	regex: JSON
}

input NodeFieldSelector {
	children: NodeFieldSelector
	id: FieldSelectorEnum
	internal: InternalFieldSelector
	parent: NodeFieldSelector
}

input NodeFilterInput {
	children: NodeFilterListInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	parent: NodeFilterInput
}

input NodeFilterListInput {
	elemMatch: NodeFilterInput
}

input NodeSortInput {
	children: NodeSortInput
	id: SortOrderEnum
	internal: InternalSortInput
	parent: NodeSortInput
}

input PrismicAlternateLanguageTypeFieldSelector {
	id: FieldSelectorEnum
	lang: FieldSelectorEnum
	raw: FieldSelectorEnum
	type: FieldSelectorEnum
	uid: FieldSelectorEnum
}

input PrismicAlternateLanguageTypeFilterInput {
	id: IDQueryOperatorInput
	lang: StringQueryOperatorInput
	raw: JSONQueryOperatorInput
	type: StringQueryOperatorInput
	uid: StringQueryOperatorInput
}

input PrismicAlternateLanguageTypeFilterListInput {
	elemMatch: PrismicAlternateLanguageTypeFilterInput
}

input PrismicAlternateLanguageTypeSortInput {
	id: SortOrderEnum
	lang: SortOrderEnum
	raw: SortOrderEnum
	type: SortOrderEnum
	uid: SortOrderEnum
}

input PrismicCategoryDataTypeFieldSelector {
	title: FieldSelectorEnum
}

input PrismicCategoryDataTypeFilterInput {
	title: StringQueryOperatorInput
}

input PrismicCategoryDataTypeSortInput {
	title: SortOrderEnum
}

input PrismicCategoryFieldSelector {
	_previewable: FieldSelectorEnum
	alternate_languages: PrismicAlternateLanguageTypeFieldSelector
	children: NodeFieldSelector
	data: PrismicCategoryDataTypeFieldSelector
	dataRaw: FieldSelectorEnum
	first_publication_date: FieldSelectorEnum
	href: FieldSelectorEnum
	id: FieldSelectorEnum
	internal: InternalFieldSelector
	lang: FieldSelectorEnum
	last_publication_date: FieldSelectorEnum
	parent: NodeFieldSelector
	prismicId: FieldSelectorEnum
	tags: FieldSelectorEnum
	type: FieldSelectorEnum
	uid: FieldSelectorEnum
	url: FieldSelectorEnum
}

input PrismicCategoryFilterInput {
	_previewable: IDQueryOperatorInput
	alternate_languages: PrismicAlternateLanguageTypeFilterListInput
	children: NodeFilterListInput
	data: PrismicCategoryDataTypeFilterInput
	dataRaw: JSONQueryOperatorInput
	first_publication_date: DateQueryOperatorInput
	href: StringQueryOperatorInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	lang: StringQueryOperatorInput
	last_publication_date: DateQueryOperatorInput
	parent: NodeFilterInput
	prismicId: IDQueryOperatorInput
	tags: StringQueryOperatorInput
	type: StringQueryOperatorInput
	uid: StringQueryOperatorInput
	url: StringQueryOperatorInput
}

input PrismicCategorySortInput {
	_previewable: SortOrderEnum
	alternate_languages: PrismicAlternateLanguageTypeSortInput
	children: NodeSortInput
	data: PrismicCategoryDataTypeSortInput
	dataRaw: SortOrderEnum
	first_publication_date: SortOrderEnum
	href: SortOrderEnum
	id: SortOrderEnum
	internal: InternalSortInput
	lang: SortOrderEnum
	last_publication_date: SortOrderEnum
	parent: NodeSortInput
	prismicId: SortOrderEnum
	tags: SortOrderEnum
	type: SortOrderEnum
	uid: SortOrderEnum
	url: SortOrderEnum
}

input PrismicEmbedTypeFieldSelector {
	children: NodeFieldSelector
	id: FieldSelectorEnum
	internal: InternalFieldSelector
	parent: NodeFieldSelector
}

input PrismicEmbedTypeFilterInput {
	children: NodeFilterListInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	parent: NodeFilterInput
}

input PrismicEmbedTypeSortInput {
	children: NodeSortInput
	id: SortOrderEnum
	internal: InternalSortInput
	parent: NodeSortInput
}

input PrismicGeoPointTypeFieldSelector {
	latitude: FieldSelectorEnum
	longitude: FieldSelectorEnum
}

input PrismicGeoPointTypeFilterInput {
	latitude: FloatQueryOperatorInput
	longitude: FloatQueryOperatorInput
}

input PrismicGeoPointTypeSortInput {
	latitude: SortOrderEnum
	longitude: SortOrderEnum
}

input PrismicImageDimensionsTypeFieldSelector {
	height: FieldSelectorEnum
	width: FieldSelectorEnum
}

input PrismicImageDimensionsTypeFilterInput {
	height: IntQueryOperatorInput
	width: IntQueryOperatorInput
}

input PrismicImageDimensionsTypeSortInput {
	height: SortOrderEnum
	width: SortOrderEnum
}

input PrismicImageThumbnailTypeFieldSelector {
	alt: FieldSelectorEnum
	copyright: FieldSelectorEnum
	dimensions: PrismicImageDimensionsTypeFieldSelector
	fixed: ImgixFixedFieldSelector
	fluid: ImgixFluidFieldSelector
	gatsbyImageData: FieldSelectorEnum
	localFile: FileFieldSelector
	url: FieldSelectorEnum
}

input PrismicImageThumbnailTypeFilterInput {
	alt: StringQueryOperatorInput
	copyright: StringQueryOperatorInput
	dimensions: PrismicImageDimensionsTypeFilterInput
	fixed: ImgixFixedFilterInput
	fluid: ImgixFluidFilterInput
	gatsbyImageData: JSONQueryOperatorInput
	localFile: FileFilterInput
	url: StringQueryOperatorInput
}

input PrismicImageThumbnailTypeSortInput {
	alt: SortOrderEnum
	copyright: SortOrderEnum
	dimensions: PrismicImageDimensionsTypeSortInput
	fixed: ImgixFixedSortInput
	fluid: ImgixFluidSortInput
	gatsbyImageData: SortOrderEnum
	localFile: FileSortInput
	url: SortOrderEnum
}

input PrismicLinkTypeEnumQueryOperatorInput {
	eq: PrismicLinkTypeEnum
	in: [PrismicLinkTypeEnum]
	ne: PrismicLinkTypeEnum
	nin: [PrismicLinkTypeEnum]
}

input PrismicLinkTypeFieldSelector {
	id: FieldSelectorEnum
	isBroken: FieldSelectorEnum
	lang: FieldSelectorEnum
	link_type: FieldSelectorEnum
	localFile: FileFieldSelector
	raw: FieldSelectorEnum
	size: FieldSelectorEnum
	slug: FieldSelectorEnum
	tags: FieldSelectorEnum
	target: FieldSelectorEnum
	type: FieldSelectorEnum
	uid: FieldSelectorEnum
	url: FieldSelectorEnum
}

input PrismicLinkTypeFilterInput {
	id: IDQueryOperatorInput
	isBroken: BooleanQueryOperatorInput
	lang: StringQueryOperatorInput
	link_type: PrismicLinkTypeEnumQueryOperatorInput
	localFile: FileFilterInput
	raw: JSONQueryOperatorInput
	size: IntQueryOperatorInput
	slug: StringQueryOperatorInput
	tags: StringQueryOperatorInput
	target: StringQueryOperatorInput
	type: StringQueryOperatorInput
	uid: StringQueryOperatorInput
	url: StringQueryOperatorInput
}

input PrismicLinkTypeSortInput {
	id: SortOrderEnum
	isBroken: SortOrderEnum
	lang: SortOrderEnum
	link_type: SortOrderEnum
	localFile: FileSortInput
	raw: SortOrderEnum
	size: SortOrderEnum
	slug: SortOrderEnum
	tags: SortOrderEnum
	target: SortOrderEnum
	type: SortOrderEnum
	uid: SortOrderEnum
	url: SortOrderEnum
}

input PrismicPictureDataImageImageThumbnailsTypeFieldSelector {
	thumbnail: PrismicImageThumbnailTypeFieldSelector
}

input PrismicPictureDataImageImageThumbnailsTypeFilterInput {
	thumbnail: PrismicImageThumbnailTypeFilterInput
}

input PrismicPictureDataImageImageThumbnailsTypeSortInput {
	thumbnail: PrismicImageThumbnailTypeSortInput
}

input PrismicPictureDataImageImageTypeFieldSelector {
	alt: FieldSelectorEnum
	copyright: FieldSelectorEnum
	dimensions: PrismicImageDimensionsTypeFieldSelector
	fixed: ImgixFixedFieldSelector
	fluid: ImgixFluidFieldSelector
	gatsbyImageData: FieldSelectorEnum
	localFile: FileFieldSelector
	thumbnails: PrismicPictureDataImageImageThumbnailsTypeFieldSelector
	url: FieldSelectorEnum
}

input PrismicPictureDataImageImageTypeFilterInput {
	alt: StringQueryOperatorInput
	copyright: StringQueryOperatorInput
	dimensions: PrismicImageDimensionsTypeFilterInput
	fixed: ImgixFixedFilterInput
	fluid: ImgixFluidFilterInput
	gatsbyImageData: JSONQueryOperatorInput
	localFile: FileFilterInput
	thumbnails: PrismicPictureDataImageImageThumbnailsTypeFilterInput
	url: StringQueryOperatorInput
}

input PrismicPictureDataImageImageTypeSortInput {
	alt: SortOrderEnum
	copyright: SortOrderEnum
	dimensions: PrismicImageDimensionsTypeSortInput
	fixed: ImgixFixedSortInput
	fluid: ImgixFluidSortInput
	gatsbyImageData: SortOrderEnum
	localFile: FileSortInput
	thumbnails: PrismicPictureDataImageImageThumbnailsTypeSortInput
	url: SortOrderEnum
}

input PrismicPictureDataTagsFieldSelector {
	tag: PrismicLinkTypeFieldSelector
}

input PrismicPictureDataTagsFilterInput {
	tag: PrismicLinkTypeFilterInput
}

input PrismicPictureDataTagsFilterListInput {
	elemMatch: PrismicPictureDataTagsFilterInput
}

input PrismicPictureDataTagsSortInput {
	tag: PrismicLinkTypeSortInput
}

input PrismicPictureDataTypeFieldSelector {
	category: PrismicLinkTypeFieldSelector
	coordinates: PrismicGeoPointTypeFieldSelector
	datetime: FieldSelectorEnum
	homepage: FieldSelectorEnum
	image: PrismicPictureDataImageImageTypeFieldSelector
	series: PrismicLinkTypeFieldSelector
	tags: PrismicPictureDataTagsFieldSelector
	title: FieldSelectorEnum
}

input PrismicPictureDataTypeFilterInput {
	category: PrismicLinkTypeFilterInput
	coordinates: PrismicGeoPointTypeFilterInput
	datetime: DateQueryOperatorInput
	homepage: BooleanQueryOperatorInput
	image: PrismicPictureDataImageImageTypeFilterInput
	series: PrismicLinkTypeFilterInput
	tags: PrismicPictureDataTagsFilterListInput
	title: StringQueryOperatorInput
}

input PrismicPictureDataTypeSortInput {
	category: PrismicLinkTypeSortInput
	coordinates: PrismicGeoPointTypeSortInput
	datetime: SortOrderEnum
	homepage: SortOrderEnum
	image: PrismicPictureDataImageImageTypeSortInput
	series: PrismicLinkTypeSortInput
	tags: PrismicPictureDataTagsSortInput
	title: SortOrderEnum
}

input PrismicPictureFieldSelector {
	_previewable: FieldSelectorEnum
	alternate_languages: PrismicAlternateLanguageTypeFieldSelector
	children: NodeFieldSelector
	data: PrismicPictureDataTypeFieldSelector
	dataRaw: FieldSelectorEnum
	first_publication_date: FieldSelectorEnum
	href: FieldSelectorEnum
	id: FieldSelectorEnum
	internal: InternalFieldSelector
	lang: FieldSelectorEnum
	last_publication_date: FieldSelectorEnum
	parent: NodeFieldSelector
	prismicId: FieldSelectorEnum
	tags: FieldSelectorEnum
	type: FieldSelectorEnum
	uid: FieldSelectorEnum
	url: FieldSelectorEnum
}

input PrismicPictureFilterInput {
	_previewable: IDQueryOperatorInput
	alternate_languages: PrismicAlternateLanguageTypeFilterListInput
	children: NodeFilterListInput
	data: PrismicPictureDataTypeFilterInput
	dataRaw: JSONQueryOperatorInput
	first_publication_date: DateQueryOperatorInput
	href: StringQueryOperatorInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	lang: StringQueryOperatorInput
	last_publication_date: DateQueryOperatorInput
	parent: NodeFilterInput
	prismicId: IDQueryOperatorInput
	tags: StringQueryOperatorInput
	type: StringQueryOperatorInput
	uid: StringQueryOperatorInput
	url: StringQueryOperatorInput
}

input PrismicPictureSortInput {
	_previewable: SortOrderEnum
	alternate_languages: PrismicAlternateLanguageTypeSortInput
	children: NodeSortInput
	data: PrismicPictureDataTypeSortInput
	dataRaw: SortOrderEnum
	first_publication_date: SortOrderEnum
	href: SortOrderEnum
	id: SortOrderEnum
	internal: InternalSortInput
	lang: SortOrderEnum
	last_publication_date: SortOrderEnum
	parent: NodeSortInput
	prismicId: SortOrderEnum
	tags: SortOrderEnum
	type: SortOrderEnum
	uid: SortOrderEnum
	url: SortOrderEnum
}

input PrismicSeriesDataTypeFieldSelector {
	title: FieldSelectorEnum
}

input PrismicSeriesDataTypeFilterInput {
	title: StringQueryOperatorInput
}

input PrismicSeriesDataTypeSortInput {
	title: SortOrderEnum
}

input PrismicSeriesFieldSelector {
	_previewable: FieldSelectorEnum
	alternate_languages: PrismicAlternateLanguageTypeFieldSelector
	children: NodeFieldSelector
	data: PrismicSeriesDataTypeFieldSelector
	dataRaw: FieldSelectorEnum
	first_publication_date: FieldSelectorEnum
	href: FieldSelectorEnum
	id: FieldSelectorEnum
	internal: InternalFieldSelector
	lang: FieldSelectorEnum
	last_publication_date: FieldSelectorEnum
	parent: NodeFieldSelector
	prismicId: FieldSelectorEnum
	tags: FieldSelectorEnum
	type: FieldSelectorEnum
	uid: FieldSelectorEnum
	url: FieldSelectorEnum
}

input PrismicSeriesFilterInput {
	_previewable: IDQueryOperatorInput
	alternate_languages: PrismicAlternateLanguageTypeFilterListInput
	children: NodeFilterListInput
	data: PrismicSeriesDataTypeFilterInput
	dataRaw: JSONQueryOperatorInput
	first_publication_date: DateQueryOperatorInput
	href: StringQueryOperatorInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	lang: StringQueryOperatorInput
	last_publication_date: DateQueryOperatorInput
	parent: NodeFilterInput
	prismicId: IDQueryOperatorInput
	tags: StringQueryOperatorInput
	type: StringQueryOperatorInput
	uid: StringQueryOperatorInput
	url: StringQueryOperatorInput
}

input PrismicSeriesSortInput {
	_previewable: SortOrderEnum
	alternate_languages: PrismicAlternateLanguageTypeSortInput
	children: NodeSortInput
	data: PrismicSeriesDataTypeSortInput
	dataRaw: SortOrderEnum
	first_publication_date: SortOrderEnum
	href: SortOrderEnum
	id: SortOrderEnum
	internal: InternalSortInput
	lang: SortOrderEnum
	last_publication_date: SortOrderEnum
	parent: NodeSortInput
	prismicId: SortOrderEnum
	tags: SortOrderEnum
	type: SortOrderEnum
	uid: SortOrderEnum
	url: SortOrderEnum
}

input PrismicTagsDataTypeFieldSelector {
	title: FieldSelectorEnum
}

input PrismicTagsDataTypeFilterInput {
	title: StringQueryOperatorInput
}

input PrismicTagsDataTypeSortInput {
	title: SortOrderEnum
}

input PrismicTagsFieldSelector {
	_previewable: FieldSelectorEnum
	alternate_languages: PrismicAlternateLanguageTypeFieldSelector
	children: NodeFieldSelector
	data: PrismicTagsDataTypeFieldSelector
	dataRaw: FieldSelectorEnum
	first_publication_date: FieldSelectorEnum
	href: FieldSelectorEnum
	id: FieldSelectorEnum
	internal: InternalFieldSelector
	lang: FieldSelectorEnum
	last_publication_date: FieldSelectorEnum
	parent: NodeFieldSelector
	prismicId: FieldSelectorEnum
	tags: FieldSelectorEnum
	type: FieldSelectorEnum
	uid: FieldSelectorEnum
	url: FieldSelectorEnum
}

input PrismicTagsFilterInput {
	_previewable: IDQueryOperatorInput
	alternate_languages: PrismicAlternateLanguageTypeFilterListInput
	children: NodeFilterListInput
	data: PrismicTagsDataTypeFilterInput
	dataRaw: JSONQueryOperatorInput
	first_publication_date: DateQueryOperatorInput
	href: StringQueryOperatorInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	lang: StringQueryOperatorInput
	last_publication_date: DateQueryOperatorInput
	parent: NodeFilterInput
	prismicId: IDQueryOperatorInput
	tags: StringQueryOperatorInput
	type: StringQueryOperatorInput
	uid: StringQueryOperatorInput
	url: StringQueryOperatorInput
}

input PrismicTagsSortInput {
	_previewable: SortOrderEnum
	alternate_languages: PrismicAlternateLanguageTypeSortInput
	children: NodeSortInput
	data: PrismicTagsDataTypeSortInput
	dataRaw: SortOrderEnum
	first_publication_date: SortOrderEnum
	href: SortOrderEnum
	id: SortOrderEnum
	internal: InternalSortInput
	lang: SortOrderEnum
	last_publication_date: SortOrderEnum
	parent: NodeSortInput
	prismicId: SortOrderEnum
	tags: SortOrderEnum
	type: SortOrderEnum
	uid: SortOrderEnum
	url: SortOrderEnum
}

input PrismicTypePathTypeFieldSelector {
	children: NodeFieldSelector
	id: FieldSelectorEnum
	internal: InternalFieldSelector
	kind: FieldSelectorEnum
	parent: NodeFieldSelector
	path: FieldSelectorEnum
	type: FieldSelectorEnum
}

input PrismicTypePathTypeFilterInput {
	children: NodeFilterListInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	kind: StringQueryOperatorInput
	parent: NodeFilterInput
	path: StringQueryOperatorInput
	type: StringQueryOperatorInput
}

input PrismicTypePathTypeSortInput {
	children: NodeSortInput
	id: SortOrderEnum
	internal: InternalSortInput
	kind: SortOrderEnum
	parent: NodeSortInput
	path: SortOrderEnum
	type: SortOrderEnum
}

input SiteBuildMetadataFieldSelector {
	buildTime: FieldSelectorEnum
	children: NodeFieldSelector
	id: FieldSelectorEnum
	internal: InternalFieldSelector
	parent: NodeFieldSelector
}

input SiteBuildMetadataFilterInput {
	buildTime: DateQueryOperatorInput
	children: NodeFilterListInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	parent: NodeFilterInput
}

input SiteBuildMetadataSortInput {
	buildTime: SortOrderEnum
	children: NodeSortInput
	id: SortOrderEnum
	internal: InternalSortInput
	parent: NodeSortInput
}

input SiteFieldSelector {
	buildTime: FieldSelectorEnum
	children: NodeFieldSelector
	flags: SiteFlagsFieldSelector
	graphqlTypegen: FieldSelectorEnum
	host: FieldSelectorEnum
	id: FieldSelectorEnum
	internal: InternalFieldSelector
	jsxImportSource: FieldSelectorEnum
	jsxRuntime: FieldSelectorEnum
	parent: NodeFieldSelector
	pathPrefix: FieldSelectorEnum
	polyfill: FieldSelectorEnum
	port: FieldSelectorEnum
	siteMetadata: SiteSiteMetadataFieldSelector
	trailingSlash: FieldSelectorEnum
}

input SiteFilterInput {
	buildTime: DateQueryOperatorInput
	children: NodeFilterListInput
	flags: SiteFlagsFilterInput
	graphqlTypegen: BooleanQueryOperatorInput
	host: StringQueryOperatorInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	jsxImportSource: StringQueryOperatorInput
	jsxRuntime: StringQueryOperatorInput
	parent: NodeFilterInput
	pathPrefix: StringQueryOperatorInput
	polyfill: BooleanQueryOperatorInput
	port: IntQueryOperatorInput
	siteMetadata: SiteSiteMetadataFilterInput
	trailingSlash: StringQueryOperatorInput
}

input SiteFlagsFieldSelector {
	DEV_SSR: FieldSelectorEnum
	FAST_DEV: FieldSelectorEnum
}

input SiteFlagsFilterInput {
	DEV_SSR: BooleanQueryOperatorInput
	FAST_DEV: BooleanQueryOperatorInput
}

input SiteFlagsSortInput {
	DEV_SSR: SortOrderEnum
	FAST_DEV: SortOrderEnum
}

input SiteFunctionFieldSelector {
	absoluteCompiledFilePath: FieldSelectorEnum
	children: NodeFieldSelector
	functionRoute: FieldSelectorEnum
	id: FieldSelectorEnum
	internal: InternalFieldSelector
	matchPath: FieldSelectorEnum
	originalAbsoluteFilePath: FieldSelectorEnum
	originalRelativeFilePath: FieldSelectorEnum
	parent: NodeFieldSelector
	pluginName: FieldSelectorEnum
	relativeCompiledFilePath: FieldSelectorEnum
}

input SiteFunctionFilterInput {
	absoluteCompiledFilePath: StringQueryOperatorInput
	children: NodeFilterListInput
	functionRoute: StringQueryOperatorInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	matchPath: StringQueryOperatorInput
	originalAbsoluteFilePath: StringQueryOperatorInput
	originalRelativeFilePath: StringQueryOperatorInput
	parent: NodeFilterInput
	pluginName: StringQueryOperatorInput
	relativeCompiledFilePath: StringQueryOperatorInput
}

input SiteFunctionSortInput {
	absoluteCompiledFilePath: SortOrderEnum
	children: NodeSortInput
	functionRoute: SortOrderEnum
	id: SortOrderEnum
	internal: InternalSortInput
	matchPath: SortOrderEnum
	originalAbsoluteFilePath: SortOrderEnum
	originalRelativeFilePath: SortOrderEnum
	parent: NodeSortInput
	pluginName: SortOrderEnum
	relativeCompiledFilePath: SortOrderEnum
}

input SitePageFieldSelector {
	children: NodeFieldSelector
	component: FieldSelectorEnum
	componentChunkName: FieldSelectorEnum
	id: FieldSelectorEnum
	internal: InternalFieldSelector
	internalComponentName: FieldSelectorEnum
	matchPath: FieldSelectorEnum
	pageContext: FieldSelectorEnum
	parent: NodeFieldSelector
	path: FieldSelectorEnum
	pluginCreator: SitePluginFieldSelector
}

input SitePageFilterInput {
	children: NodeFilterListInput
	component: StringQueryOperatorInput
	componentChunkName: StringQueryOperatorInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	internalComponentName: StringQueryOperatorInput
	matchPath: StringQueryOperatorInput
	pageContext: JSONQueryOperatorInput
	parent: NodeFilterInput
	path: StringQueryOperatorInput
	pluginCreator: SitePluginFilterInput
}

input SitePageSortInput {
	children: NodeSortInput
	component: SortOrderEnum
	componentChunkName: SortOrderEnum
	id: SortOrderEnum
	internal: InternalSortInput
	internalComponentName: SortOrderEnum
	matchPath: SortOrderEnum
	pageContext: SortOrderEnum
	parent: NodeSortInput
	path: SortOrderEnum
	pluginCreator: SitePluginSortInput
}

input SitePluginFieldSelector {
	browserAPIs: FieldSelectorEnum
	children: NodeFieldSelector
	id: FieldSelectorEnum
	internal: InternalFieldSelector
	name: FieldSelectorEnum
	nodeAPIs: FieldSelectorEnum
	packageJson: FieldSelectorEnum
	parent: NodeFieldSelector
	pluginFilepath: FieldSelectorEnum
	pluginOptions: FieldSelectorEnum
	resolve: FieldSelectorEnum
	ssrAPIs: FieldSelectorEnum
	version: FieldSelectorEnum
}

input SitePluginFilterInput {
	browserAPIs: StringQueryOperatorInput
	children: NodeFilterListInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	name: StringQueryOperatorInput
	nodeAPIs: StringQueryOperatorInput
	packageJson: JSONQueryOperatorInput
	parent: NodeFilterInput
	pluginFilepath: StringQueryOperatorInput
	pluginOptions: JSONQueryOperatorInput
	resolve: StringQueryOperatorInput
	ssrAPIs: StringQueryOperatorInput
	version: StringQueryOperatorInput
}

input SitePluginSortInput {
	browserAPIs: SortOrderEnum
	children: NodeSortInput
	id: SortOrderEnum
	internal: InternalSortInput
	name: SortOrderEnum
	nodeAPIs: SortOrderEnum
	packageJson: SortOrderEnum
	parent: NodeSortInput
	pluginFilepath: SortOrderEnum
	pluginOptions: SortOrderEnum
	resolve: SortOrderEnum
	ssrAPIs: SortOrderEnum
	version: SortOrderEnum
}

input SiteSiteMetadataFieldSelector {
	description: FieldSelectorEnum
	siteUrl: FieldSelectorEnum
	title: FieldSelectorEnum
}

input SiteSiteMetadataFilterInput {
	description: StringQueryOperatorInput
	siteUrl: StringQueryOperatorInput
	title: StringQueryOperatorInput
}

input SiteSiteMetadataSortInput {
	description: SortOrderEnum
	siteUrl: SortOrderEnum
	title: SortOrderEnum
}

input SiteSortInput {
	buildTime: SortOrderEnum
	children: NodeSortInput
	flags: SiteFlagsSortInput
	graphqlTypegen: SortOrderEnum
	host: SortOrderEnum
	id: SortOrderEnum
	internal: InternalSortInput
	jsxImportSource: SortOrderEnum
	jsxRuntime: SortOrderEnum
	parent: NodeSortInput
	pathPrefix: SortOrderEnum
	polyfill: SortOrderEnum
	port: SortOrderEnum
	siteMetadata: SiteSiteMetadataSortInput
	trailingSlash: SortOrderEnum
}

input StringQueryOperatorInput {
	eq: String
	glob: String
	in: [String]
	ne: String
	nin: [String]
	regex: String
}
