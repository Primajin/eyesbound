# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
	query: Query
}

"Node Interface"
interface Node {
	children: [Node!]!
	id: ID!
	internal: Internal!
	parent: Node
}

interface PrismicSliceType {
	id: ID!
	slice_label: String
	slice_type: String!
}

union PrismicAllDocumentTypes = PrismicCategory | PrismicPicture | PrismicSeries | PrismicTags

type Directory implements Node {
	absolutePath: String!
	accessTime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	atime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	atimeMs: Float!
	base: String!
	birthTime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	birthtime: Date @deprecated(reason : "Use `birthTime` instead")
	birthtimeMs: Float @deprecated(reason : "Use `birthTime` instead")
	changeTime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	children: [Node!]!
	ctime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	ctimeMs: Float!
	dev: Int!
	dir: String!
	ext: String!
	extension: String!
	gid: Int!
	id: ID!
	ino: Float!
	internal: Internal!
	mode: Int!
	modifiedTime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	mtime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	mtimeMs: Float!
	name: String!
	nlink: Int!
	parent: Node
	prettySize: String!
	rdev: Int!
	relativeDirectory: String!
	relativePath: String!
	root: String!
	size: Int!
	sourceInstanceName: String!
	uid: Int!
}

type DirectoryConnection {
	distinct(field: DirectoryFieldsEnum!): [String!]!
	edges: [DirectoryEdge!]!
	group(field: DirectoryFieldsEnum!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
	max(field: DirectoryFieldsEnum!): Float
	min(field: DirectoryFieldsEnum!): Float
	nodes: [Directory!]!
	pageInfo: PageInfo!
	sum(field: DirectoryFieldsEnum!): Float
	totalCount: Int!
}

type DirectoryEdge {
	next: Directory
	node: Directory!
	previous: Directory
}

type DirectoryGroupConnection {
	edges: [DirectoryEdge!]!
	field: String!
	fieldValue: String
	nodes: [Directory!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type File implements Node {
	absolutePath: String!
	accessTime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	atime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	atimeMs: Float!
	base: String!
	birthTime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	birthtime: Date @deprecated(reason : "Use `birthTime` instead")
	birthtimeMs: Float @deprecated(reason : "Use `birthTime` instead")
	changeTime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	children: [Node!]!
	ctime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	ctimeMs: Float!
	dev: Int!
	dir: String!
	ext: String!
	extension: String!
	gid: Int!
	id: ID!
	ino: Float!
	internal: Internal!
	mode: Int!
	modifiedTime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	mtime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	mtimeMs: Float!
	name: String!
	nlink: Int!
	parent: Node
	prettySize: String!
	rdev: Int!
	relativeDirectory: String!
	relativePath: String!
	root: String!
	size: Int!
	sourceInstanceName: String!
	uid: Int!
}

type FileConnection {
	distinct(field: FileFieldsEnum!): [String!]!
	edges: [FileEdge!]!
	group(field: FileFieldsEnum!, limit: Int, skip: Int): [FileGroupConnection!]!
	max(field: FileFieldsEnum!): Float
	min(field: FileFieldsEnum!): Float
	nodes: [File!]!
	pageInfo: PageInfo!
	sum(field: FileFieldsEnum!): Float
	totalCount: Int!
}

type FileEdge {
	next: File
	node: File!
	previous: File
}

type FileGroupConnection {
	edges: [FileEdge!]!
	field: String!
	fieldValue: String
	nodes: [File!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type ImgixFixed {
	base64: String!
	height: Int!
	sizes: String!
	src: String!
	srcSet: String!
	srcSetWebp: String!
	srcWebp: String!
	width: Int!
}

type ImgixFluid {
	aspectRatio: Float!
	base64: String!
	sizes: String!
	src: String!
	srcSet: String!
	srcSetWebp: String!
	srcWebp: String!
}

type Internal {
	content: String
	contentDigest: String!
	description: String
	fieldOwners: [String]
	ignoreType: Boolean
	mediaType: String
	owner: String!
	type: String!
}

type PageInfo {
	currentPage: Int!
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
	itemCount: Int!
	pageCount: Int!
	perPage: Int
	totalCount: Int!
}

type PrismicAlternateLanguageType {
	document: PrismicAllDocumentTypes
	id: ID
	lang: String
	raw: JSON
	type: String
	uid: String
}

type PrismicCategory implements Node {
	_previewable: ID!
	alternate_languages: [PrismicAlternateLanguageType!]!
	children: [Node!]!
	data: PrismicCategoryDataType
	dataRaw: JSON!
	first_publication_date(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	href: String!
	id: ID!
	internal: Internal!
	lang: String!
	last_publication_date(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	parent: Node
	prismicId: ID!
	tags: [String!]!
	type: String!
	uid: String!
	url: String
}

type PrismicCategoryConnection {
	distinct(field: PrismicCategoryFieldsEnum!): [String!]!
	edges: [PrismicCategoryEdge!]!
	group(field: PrismicCategoryFieldsEnum!, limit: Int, skip: Int): [PrismicCategoryGroupConnection!]!
	max(field: PrismicCategoryFieldsEnum!): Float
	min(field: PrismicCategoryFieldsEnum!): Float
	nodes: [PrismicCategory!]!
	pageInfo: PageInfo!
	sum(field: PrismicCategoryFieldsEnum!): Float
	totalCount: Int!
}

type PrismicCategoryDataType {
	title: String
}

type PrismicCategoryEdge {
	next: PrismicCategory
	node: PrismicCategory!
	previous: PrismicCategory
}

type PrismicCategoryGroupConnection {
	edges: [PrismicCategoryEdge!]!
	field: String!
	fieldValue: String
	nodes: [PrismicCategory!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type PrismicEmbedType implements Node {
	children: [Node!]!
	id: ID!
	internal: Internal!
	parent: Node
}

type PrismicEmbedTypeConnection {
	distinct(field: PrismicEmbedTypeFieldsEnum!): [String!]!
	edges: [PrismicEmbedTypeEdge!]!
	group(field: PrismicEmbedTypeFieldsEnum!, limit: Int, skip: Int): [PrismicEmbedTypeGroupConnection!]!
	max(field: PrismicEmbedTypeFieldsEnum!): Float
	min(field: PrismicEmbedTypeFieldsEnum!): Float
	nodes: [PrismicEmbedType!]!
	pageInfo: PageInfo!
	sum(field: PrismicEmbedTypeFieldsEnum!): Float
	totalCount: Int!
}

type PrismicEmbedTypeEdge {
	next: PrismicEmbedType
	node: PrismicEmbedType!
	previous: PrismicEmbedType
}

type PrismicEmbedTypeGroupConnection {
	edges: [PrismicEmbedTypeEdge!]!
	field: String!
	fieldValue: String
	nodes: [PrismicEmbedType!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type PrismicGeoPointType {
	latitude: Float!
	longitude: Float!
}

type PrismicImageDimensionsType {
	height: Int!
	width: Int!
}

type PrismicImageThumbnailType {
	alt: String
	copyright: String
	dimensions: PrismicImageDimensionsType
	"Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
	fixed(
		"The fixed image height to render, in px."
		height: Int,
		"The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
		imgixParams: ImgixParamsInput = {},
		"Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
		placeholderImgixParams: ImgixParamsInput = {},
		"The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
		quality: Int,
		"The fixed image width to render, in px."
		width: Int = 8192
	): ImgixFixed
	"Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
	fluid(
		"The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
		imgixParams: ImgixParamsInput = {},
		"The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
		maxHeight: Int,
		"The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
		maxWidth: Int = 8192,
		"Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
		placeholderImgixParams: ImgixParamsInput = {},
		"A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
		srcSetBreakpoints: [Int]
	): ImgixFluid
	gatsbyImageData(
		"""

		If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
		If neither width or height is provided, height will be set based on the intrinsic width of the source image.
		"""
		aspectRatio: Float,
		"Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
		backgroundColor: String,
		"""

		Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
		based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
		It will never generate any images larger than the source.
		"""
		breakpoints: [Int],
		"If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
		height: Int,
		"""

		This argument is used to set parameters to instruct imgix to transform the image.

		All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
		"""
		imgixParams: ImgixParamsInput,
		"""

		The layout for the image.
		FIXED: A static image sized, that does not resize according to the screen width
		FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
		CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
		"""
		layout: GatsbyImageLayout,
		"""

		A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
		Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
		"""
		outputPixelDensities: [Float],
		"""

		Format of generated placeholder image, displayed while the main image loads.
		BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
		DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
		NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
		"""
		placeholder: ImgixPlaceholder,
		"""

		This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

		All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
		"""
		placeholderImgixParams: ImgixParamsInput,
		"""

		The "sizes" property, passed to the img tag. This describes the display size of the image.
		This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
		container will be the full width of the screen. In these cases we will generate an appropriate value.
		"""
		sizes: String,
		"This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
		srcSetMaxWidth: Int = 8192,
		"This argument determines the minimum srcset width that is generated. The default is 100px."
		srcSetMinWidth: Int = 100,
		"""

		The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
		The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
		Ignored if layout = FLUID.
		"""
		width: Int,
		"""

		This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

		By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
		"""
		widthTolerance: Float = 0.08
	): JSON
	localFile: File
	"A plain imgix URL with the URL and params applied."
	url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicLinkType {
	document: PrismicAllDocumentTypes
	id: ID
	isBroken: Boolean
	lang: String
	link_type: PrismicLinkTypeEnum
	localFile: File
	raw: JSON
	size: Int
	slug: String
	tags: [String]
	target: String
	type: String
	uid: String
	url: String
}

type PrismicPicture implements Node {
	_previewable: ID!
	alternate_languages: [PrismicAlternateLanguageType!]!
	children: [Node!]!
	data: PrismicPictureDataType
	dataRaw: JSON!
	first_publication_date(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	href: String!
	id: ID!
	internal: Internal!
	lang: String!
	last_publication_date(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	parent: Node
	prismicId: ID!
	tags: [String!]!
	type: String!
	uid: String!
	url: String
}

type PrismicPictureConnection {
	distinct(field: PrismicPictureFieldsEnum!): [String!]!
	edges: [PrismicPictureEdge!]!
	group(field: PrismicPictureFieldsEnum!, limit: Int, skip: Int): [PrismicPictureGroupConnection!]!
	max(field: PrismicPictureFieldsEnum!): Float
	min(field: PrismicPictureFieldsEnum!): Float
	nodes: [PrismicPicture!]!
	pageInfo: PageInfo!
	sum(field: PrismicPictureFieldsEnum!): Float
	totalCount: Int!
}

type PrismicPictureDataImageImageThumbnailsType {
	thumbnail: PrismicImageThumbnailType
}

type PrismicPictureDataImageImageType {
	alt: String
	copyright: String
	dimensions: PrismicImageDimensionsType
	"Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
	fixed(
		"The fixed image height to render, in px."
		height: Int,
		"The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
		imgixParams: ImgixParamsInput = {},
		"Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
		placeholderImgixParams: ImgixParamsInput = {},
		"The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
		quality: Int,
		"The fixed image width to render, in px."
		width: Int = 8192
	): ImgixFixed
	"Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
	fluid(
		"The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
		imgixParams: ImgixParamsInput = {},
		"The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
		maxHeight: Int,
		"The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
		maxWidth: Int = 8192,
		"Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
		placeholderImgixParams: ImgixParamsInput = {},
		"A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
		srcSetBreakpoints: [Int]
	): ImgixFluid
	gatsbyImageData(
		"""

		If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
		If neither width or height is provided, height will be set based on the intrinsic width of the source image.
		"""
		aspectRatio: Float,
		"Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
		backgroundColor: String,
		"""

		Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
		based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
		It will never generate any images larger than the source.
		"""
		breakpoints: [Int],
		"If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
		height: Int,
		"""

		This argument is used to set parameters to instruct imgix to transform the image.

		All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
		"""
		imgixParams: ImgixParamsInput,
		"""

		The layout for the image.
		FIXED: A static image sized, that does not resize according to the screen width
		FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
		CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
		"""
		layout: GatsbyImageLayout,
		"""

		A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
		Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
		"""
		outputPixelDensities: [Float],
		"""

		Format of generated placeholder image, displayed while the main image loads.
		BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
		DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
		NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
		"""
		placeholder: ImgixPlaceholder,
		"""

		This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

		All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
		"""
		placeholderImgixParams: ImgixParamsInput,
		"""

		The "sizes" property, passed to the img tag. This describes the display size of the image.
		This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
		container will be the full width of the screen. In these cases we will generate an appropriate value.
		"""
		sizes: String,
		"This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
		srcSetMaxWidth: Int = 8192,
		"This argument determines the minimum srcset width that is generated. The default is 100px."
		srcSetMinWidth: Int = 100,
		"""

		The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
		The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
		Ignored if layout = FLUID.
		"""
		width: Int,
		"""

		This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

		By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
		"""
		widthTolerance: Float = 0.08
	): JSON
	localFile: File
	thumbnails: PrismicPictureDataImageImageThumbnailsType
	"A plain imgix URL with the URL and params applied."
	url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicPictureDataTags {
	tag: PrismicLinkType
}

type PrismicPictureDataType {
	category: PrismicLinkType
	coordinates: PrismicGeoPointType
	datetime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date
	homepage: Boolean
	image: PrismicPictureDataImageImageType
	series: PrismicLinkType
	tags: [PrismicPictureDataTags]
	title: String
}

type PrismicPictureEdge {
	next: PrismicPicture
	node: PrismicPicture!
	previous: PrismicPicture
}

type PrismicPictureGroupConnection {
	edges: [PrismicPictureEdge!]!
	field: String!
	fieldValue: String
	nodes: [PrismicPicture!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type PrismicSeries implements Node {
	_previewable: ID!
	alternate_languages: [PrismicAlternateLanguageType!]!
	children: [Node!]!
	data: PrismicSeriesDataType
	dataRaw: JSON!
	first_publication_date(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	href: String!
	id: ID!
	internal: Internal!
	lang: String!
	last_publication_date(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	parent: Node
	prismicId: ID!
	tags: [String!]!
	type: String!
	uid: String!
	url: String
}

type PrismicSeriesConnection {
	distinct(field: PrismicSeriesFieldsEnum!): [String!]!
	edges: [PrismicSeriesEdge!]!
	group(field: PrismicSeriesFieldsEnum!, limit: Int, skip: Int): [PrismicSeriesGroupConnection!]!
	max(field: PrismicSeriesFieldsEnum!): Float
	min(field: PrismicSeriesFieldsEnum!): Float
	nodes: [PrismicSeries!]!
	pageInfo: PageInfo!
	sum(field: PrismicSeriesFieldsEnum!): Float
	totalCount: Int!
}

type PrismicSeriesDataType {
	title: String
}

type PrismicSeriesEdge {
	next: PrismicSeries
	node: PrismicSeries!
	previous: PrismicSeries
}

type PrismicSeriesGroupConnection {
	edges: [PrismicSeriesEdge!]!
	field: String!
	fieldValue: String
	nodes: [PrismicSeries!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type PrismicStructuredTextType {
	html: String
	raw: JSON
	text: String
}

type PrismicTags implements Node {
	_previewable: ID!
	alternate_languages: [PrismicAlternateLanguageType!]!
	children: [Node!]!
	data: PrismicTagsDataType
	dataRaw: JSON!
	first_publication_date(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	href: String!
	id: ID!
	internal: Internal!
	lang: String!
	last_publication_date(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date!
	parent: Node
	prismicId: ID!
	tags: [String!]!
	type: String!
	uid: String!
	url: String
}

type PrismicTagsConnection {
	distinct(field: PrismicTagsFieldsEnum!): [String!]!
	edges: [PrismicTagsEdge!]!
	group(field: PrismicTagsFieldsEnum!, limit: Int, skip: Int): [PrismicTagsGroupConnection!]!
	max(field: PrismicTagsFieldsEnum!): Float
	min(field: PrismicTagsFieldsEnum!): Float
	nodes: [PrismicTags!]!
	pageInfo: PageInfo!
	sum(field: PrismicTagsFieldsEnum!): Float
	totalCount: Int!
}

type PrismicTagsDataType {
	title: String
}

type PrismicTagsEdge {
	next: PrismicTags
	node: PrismicTags!
	previous: PrismicTags
}

type PrismicTagsGroupConnection {
	edges: [PrismicTagsEdge!]!
	field: String!
	fieldValue: String
	nodes: [PrismicTags!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type PrismicTypePathType implements Node {
	children: [Node!]!
	id: ID!
	internal: Internal!
	parent: Node
	path: [String!]!
	type: String!
}

type PrismicTypePathTypeConnection {
	distinct(field: PrismicTypePathTypeFieldsEnum!): [String!]!
	edges: [PrismicTypePathTypeEdge!]!
	group(field: PrismicTypePathTypeFieldsEnum!, limit: Int, skip: Int): [PrismicTypePathTypeGroupConnection!]!
	max(field: PrismicTypePathTypeFieldsEnum!): Float
	min(field: PrismicTypePathTypeFieldsEnum!): Float
	nodes: [PrismicTypePathType!]!
	pageInfo: PageInfo!
	sum(field: PrismicTypePathTypeFieldsEnum!): Float
	totalCount: Int!
}

type PrismicTypePathTypeEdge {
	next: PrismicTypePathType
	node: PrismicTypePathType!
	previous: PrismicTypePathType
}

type PrismicTypePathTypeGroupConnection {
	edges: [PrismicTypePathTypeEdge!]!
	field: String!
	fieldValue: String
	nodes: [PrismicTypePathType!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type Query {
	allDirectory(filter: DirectoryFilterInput, limit: Int, skip: Int, sort: DirectorySortInput): DirectoryConnection!
	allFile(filter: FileFilterInput, limit: Int, skip: Int, sort: FileSortInput): FileConnection!
	allPrismicCategory(filter: PrismicCategoryFilterInput, limit: Int, skip: Int, sort: PrismicCategorySortInput): PrismicCategoryConnection!
	allPrismicEmbedType(filter: PrismicEmbedTypeFilterInput, limit: Int, skip: Int, sort: PrismicEmbedTypeSortInput): PrismicEmbedTypeConnection!
	allPrismicPicture(filter: PrismicPictureFilterInput, limit: Int, skip: Int, sort: PrismicPictureSortInput): PrismicPictureConnection!
	allPrismicSeries(filter: PrismicSeriesFilterInput, limit: Int, skip: Int, sort: PrismicSeriesSortInput): PrismicSeriesConnection!
	allPrismicTags(filter: PrismicTagsFilterInput, limit: Int, skip: Int, sort: PrismicTagsSortInput): PrismicTagsConnection!
	allPrismicTypePathType(filter: PrismicTypePathTypeFilterInput, limit: Int, skip: Int, sort: PrismicTypePathTypeSortInput): PrismicTypePathTypeConnection!
	allSite(filter: SiteFilterInput, limit: Int, skip: Int, sort: SiteSortInput): SiteConnection!
	allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, limit: Int, skip: Int, sort: SiteBuildMetadataSortInput): SiteBuildMetadataConnection!
	allSiteFunction(filter: SiteFunctionFilterInput, limit: Int, skip: Int, sort: SiteFunctionSortInput): SiteFunctionConnection!
	allSitePage(filter: SitePageFilterInput, limit: Int, skip: Int, sort: SitePageSortInput): SitePageConnection!
	allSitePlugin(filter: SitePluginFilterInput, limit: Int, skip: Int, sort: SitePluginSortInput): SitePluginConnection!
	directory(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): Directory
	file(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): File
	prismicCategory(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicCategoryDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicCategory
	prismicEmbedType(children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput): PrismicEmbedType
	prismicPicture(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicPictureDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicPicture
	prismicSeries(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicSeriesDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicSeries
	prismicTags(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicTagsDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicTags
	prismicTypePathType(children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, path: StringQueryOperatorInput, type: StringQueryOperatorInput): PrismicTypePathType
	site(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, host: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, pathPrefix: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, port: IntQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput): Site
	siteBuildMetadata(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput): SiteBuildMetadata
	siteFunction(absoluteCompiledFilePath: StringQueryOperatorInput, children: NodeFilterListInput, functionRoute: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, matchPath: StringQueryOperatorInput, originalAbsoluteFilePath: StringQueryOperatorInput, originalRelativeFilePath: StringQueryOperatorInput, parent: NodeFilterInput, pluginName: StringQueryOperatorInput, relativeCompiledFilePath: StringQueryOperatorInput): SiteFunction
	sitePage(children: NodeFilterListInput, component: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, context: SitePageContextFilterInput, id: StringQueryOperatorInput, internal: InternalFilterInput, internalComponentName: StringQueryOperatorInput, isCreatedByStatefulCreatePages: BooleanQueryOperatorInput, matchPath: StringQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput, pluginCreator: SitePluginFilterInput, pluginCreatorId: StringQueryOperatorInput): SitePage
	sitePlugin(browserAPIs: StringQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, nodeAPIs: StringQueryOperatorInput, packageJson: SitePluginPackageJsonFilterInput, parent: NodeFilterInput, pluginFilepath: StringQueryOperatorInput, pluginOptions: SitePluginPluginOptionsFilterInput, resolve: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, version: StringQueryOperatorInput): SitePlugin
}

type Site implements Node {
	buildTime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date
	children: [Node!]!
	host: String
	id: ID!
	internal: Internal!
	parent: Node
	pathPrefix: String
	polyfill: Boolean
	port: Int
	siteMetadata: SiteSiteMetadata
}

type SiteBuildMetadata implements Node {
	buildTime(
		"Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
		difference: String,
		"Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
		formatString: String,
		"Returns a string generated with Moment.js' `fromNow` function"
		fromNow: Boolean,
		"Configures the locale Moment.js will use to format the date."
		locale: String
	): Date
	children: [Node!]!
	id: ID!
	internal: Internal!
	parent: Node
}

type SiteBuildMetadataConnection {
	distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
	edges: [SiteBuildMetadataEdge!]!
	group(field: SiteBuildMetadataFieldsEnum!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
	max(field: SiteBuildMetadataFieldsEnum!): Float
	min(field: SiteBuildMetadataFieldsEnum!): Float
	nodes: [SiteBuildMetadata!]!
	pageInfo: PageInfo!
	sum(field: SiteBuildMetadataFieldsEnum!): Float
	totalCount: Int!
}

type SiteBuildMetadataEdge {
	next: SiteBuildMetadata
	node: SiteBuildMetadata!
	previous: SiteBuildMetadata
}

type SiteBuildMetadataGroupConnection {
	edges: [SiteBuildMetadataEdge!]!
	field: String!
	fieldValue: String
	nodes: [SiteBuildMetadata!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type SiteConnection {
	distinct(field: SiteFieldsEnum!): [String!]!
	edges: [SiteEdge!]!
	group(field: SiteFieldsEnum!, limit: Int, skip: Int): [SiteGroupConnection!]!
	max(field: SiteFieldsEnum!): Float
	min(field: SiteFieldsEnum!): Float
	nodes: [Site!]!
	pageInfo: PageInfo!
	sum(field: SiteFieldsEnum!): Float
	totalCount: Int!
}

type SiteEdge {
	next: Site
	node: Site!
	previous: Site
}

type SiteFunction implements Node {
	absoluteCompiledFilePath: String!
	children: [Node!]!
	functionRoute: String!
	id: ID!
	internal: Internal!
	matchPath: String
	originalAbsoluteFilePath: String!
	originalRelativeFilePath: String!
	parent: Node
	pluginName: String!
	relativeCompiledFilePath: String!
}

type SiteFunctionConnection {
	distinct(field: SiteFunctionFieldsEnum!): [String!]!
	edges: [SiteFunctionEdge!]!
	group(field: SiteFunctionFieldsEnum!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
	max(field: SiteFunctionFieldsEnum!): Float
	min(field: SiteFunctionFieldsEnum!): Float
	nodes: [SiteFunction!]!
	pageInfo: PageInfo!
	sum(field: SiteFunctionFieldsEnum!): Float
	totalCount: Int!
}

type SiteFunctionEdge {
	next: SiteFunction
	node: SiteFunction!
	previous: SiteFunction
}

type SiteFunctionGroupConnection {
	edges: [SiteFunctionEdge!]!
	field: String!
	fieldValue: String
	nodes: [SiteFunction!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type SiteGroupConnection {
	edges: [SiteEdge!]!
	field: String!
	fieldValue: String
	nodes: [Site!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type SitePage implements Node {
	children: [Node!]!
	component: String!
	componentChunkName: String!
	context: SitePageContext
	id: ID!
	internal: Internal!
	internalComponentName: String!
	isCreatedByStatefulCreatePages: Boolean
	matchPath: String
	parent: Node
	path: String!
	pluginCreator: SitePlugin
	pluginCreatorId: String
}

type SitePageConnection {
	distinct(field: SitePageFieldsEnum!): [String!]!
	edges: [SitePageEdge!]!
	group(field: SitePageFieldsEnum!, limit: Int, skip: Int): [SitePageGroupConnection!]!
	max(field: SitePageFieldsEnum!): Float
	min(field: SitePageFieldsEnum!): Float
	nodes: [SitePage!]!
	pageInfo: PageInfo!
	sum(field: SitePageFieldsEnum!): Float
	totalCount: Int!
}

type SitePageContext {
	uid: String
}

type SitePageEdge {
	next: SitePage
	node: SitePage!
	previous: SitePage
}

type SitePageGroupConnection {
	edges: [SitePageEdge!]!
	field: String!
	fieldValue: String
	nodes: [SitePage!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type SitePlugin implements Node {
	browserAPIs: [String]
	children: [Node!]!
	id: ID!
	internal: Internal!
	name: String
	nodeAPIs: [String]
	packageJson: SitePluginPackageJson
	parent: Node
	pluginFilepath: String
	pluginOptions: SitePluginPluginOptions
	resolve: String
	ssrAPIs: [String]
	version: String
}

type SitePluginConnection {
	distinct(field: SitePluginFieldsEnum!): [String!]!
	edges: [SitePluginEdge!]!
	group(field: SitePluginFieldsEnum!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
	max(field: SitePluginFieldsEnum!): Float
	min(field: SitePluginFieldsEnum!): Float
	nodes: [SitePlugin!]!
	pageInfo: PageInfo!
	sum(field: SitePluginFieldsEnum!): Float
	totalCount: Int!
}

type SitePluginEdge {
	next: SitePlugin
	node: SitePlugin!
	previous: SitePlugin
}

type SitePluginGroupConnection {
	edges: [SitePluginEdge!]!
	field: String!
	fieldValue: String
	nodes: [SitePlugin!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type SitePluginPackageJson {
	dependencies: [SitePluginPackageJsonDependencies]
	description: String
	devDependencies: [SitePluginPackageJsonDevDependencies]
	keywords: [String]
	license: String
	main: String
	name: String
	peerDependencies: [SitePluginPackageJsonPeerDependencies]
	version: String
}

type SitePluginPackageJsonDependencies {
	name: String
	version: String
}

type SitePluginPackageJsonDevDependencies {
	name: String
	version: String
}

type SitePluginPackageJsonPeerDependencies {
	name: String
	version: String
}

type SitePluginPluginOptions {
	accessToken: String
	allExtensions: Boolean
	allPageHeaders: [String]
	apiEndpoint: String
	autoLabel: String
	background_color: String
	cache_busting_mode: String
	createLinkInHead: Boolean
	crossOrigin: String
	cssPropOptimization: Boolean
	description: String
	directives: SitePluginPluginOptionsDirectives
	disableOnDev: Boolean
	display: String
	entryLimit: Int
	icon: String
	icon_options: SitePluginPluginOptionsIcon_options
	imageImgixParams: SitePluginPluginOptionsImageImgixParams
	imagePlaceholderImgixParams: SitePluginPluginOptionsImagePlaceholderImgixParams
	include_favicon: Boolean
	isTSX: Boolean
	jsxPragma: String
	labelFormat: String
	lang: String
	legacy: Boolean
	mergeDefaultDirectives: Boolean
	mergeScriptHashes: Boolean
	mergeStyleHashes: Boolean
	name: String
	output: String
	path: String
	pathCheck: Boolean
	query: String
	repositoryName: String
	schemas: SitePluginPluginOptionsSchemas
	short_name: String
	sourceMap: Boolean
	start_url: String
	theme_color: String
	theme_color_in_head: Boolean
	workboxConfig: SitePluginPluginOptionsWorkboxConfig
}

type SitePluginPluginOptionsDirectives {
	connect_src: String
	font_src: String
	frame_src: String
	img_src: String
	prefetch_src: String
	script_src: String
	style_src: String
}

type SitePluginPluginOptionsIcon_options {
	purpose: String
}

type SitePluginPluginOptionsImageImgixParams {
	auto: String
	fit: String
	q: Int
}

type SitePluginPluginOptionsImagePlaceholderImgixParams {
	blur: Int
	w: Int
}

type SitePluginPluginOptionsSchemas {
	category: SitePluginPluginOptionsSchemasCategory
	picture: SitePluginPluginOptionsSchemasPicture
	series: SitePluginPluginOptionsSchemasSeries
	tags: SitePluginPluginOptionsSchemasTags
}

type SitePluginPluginOptionsSchemasCategory {
	Main: SitePluginPluginOptionsSchemasCategoryMain
}

type SitePluginPluginOptionsSchemasCategoryMain {
	title: SitePluginPluginOptionsSchemasCategoryMainTitle
	uid: SitePluginPluginOptionsSchemasCategoryMainUid
}

type SitePluginPluginOptionsSchemasCategoryMainTitle {
	config: SitePluginPluginOptionsSchemasCategoryMainTitleConfig
	type: String
}

type SitePluginPluginOptionsSchemasCategoryMainTitleConfig {
	label: String
}

type SitePluginPluginOptionsSchemasCategoryMainUid {
	config: SitePluginPluginOptionsSchemasCategoryMainUidConfig
	type: String
}

type SitePluginPluginOptionsSchemasCategoryMainUidConfig {
	label: String
}

type SitePluginPluginOptionsSchemasPicture {
	Main: SitePluginPluginOptionsSchemasPictureMain
}

type SitePluginPluginOptionsSchemasPictureMain {
	category: SitePluginPluginOptionsSchemasPictureMainCategory
	coordinates: SitePluginPluginOptionsSchemasPictureMainCoordinates
	datetime: SitePluginPluginOptionsSchemasPictureMainDatetime
	homepage: SitePluginPluginOptionsSchemasPictureMainHomepage
	image: SitePluginPluginOptionsSchemasPictureMainImage
	series: SitePluginPluginOptionsSchemasPictureMainSeries
	tags: SitePluginPluginOptionsSchemasPictureMainTags
	title: SitePluginPluginOptionsSchemasPictureMainTitle
	uid: SitePluginPluginOptionsSchemasPictureMainUid
}

type SitePluginPluginOptionsSchemasPictureMainCategory {
	config: SitePluginPluginOptionsSchemasPictureMainCategoryConfig
	type: String
}

type SitePluginPluginOptionsSchemasPictureMainCategoryConfig {
	customtypes: [String]
	label: String
	select: String
}

type SitePluginPluginOptionsSchemasPictureMainCoordinates {
	config: SitePluginPluginOptionsSchemasPictureMainCoordinatesConfig
	type: String
}

type SitePluginPluginOptionsSchemasPictureMainCoordinatesConfig {
	label: String
}

type SitePluginPluginOptionsSchemasPictureMainDatetime {
	config: SitePluginPluginOptionsSchemasPictureMainDatetimeConfig
	type: String
}

type SitePluginPluginOptionsSchemasPictureMainDatetimeConfig {
	label: String
}

type SitePluginPluginOptionsSchemasPictureMainHomepage {
	config: SitePluginPluginOptionsSchemasPictureMainHomepageConfig
	type: String
}

type SitePluginPluginOptionsSchemasPictureMainHomepageConfig {
	default_value: Boolean
	label: String
	placeholder_false: String
	placeholder_true: String
}

type SitePluginPluginOptionsSchemasPictureMainImage {
	config: SitePluginPluginOptionsSchemasPictureMainImageConfig
	type: String
}

type SitePluginPluginOptionsSchemasPictureMainImageConfig {
	constraint: SitePluginPluginOptionsSchemasPictureMainImageConfigConstraint
	label: String
	thumbnails: [SitePluginPluginOptionsSchemasPictureMainImageConfigThumbnails]
}

type SitePluginPluginOptionsSchemasPictureMainImageConfigConstraint {
	width: Int
}

type SitePluginPluginOptionsSchemasPictureMainImageConfigThumbnails {
	name: String
	width: Int
}

type SitePluginPluginOptionsSchemasPictureMainSeries {
	config: SitePluginPluginOptionsSchemasPictureMainSeriesConfig
	type: String
}

type SitePluginPluginOptionsSchemasPictureMainSeriesConfig {
	customtypes: [String]
	label: String
	select: String
}

type SitePluginPluginOptionsSchemasPictureMainTags {
	config: SitePluginPluginOptionsSchemasPictureMainTagsConfig
	type: String
}

type SitePluginPluginOptionsSchemasPictureMainTagsConfig {
	fields: SitePluginPluginOptionsSchemasPictureMainTagsConfigFields
	label: String
}

type SitePluginPluginOptionsSchemasPictureMainTagsConfigFields {
	tag: SitePluginPluginOptionsSchemasPictureMainTagsConfigFieldsTag
}

type SitePluginPluginOptionsSchemasPictureMainTagsConfigFieldsTag {
	config: SitePluginPluginOptionsSchemasPictureMainTagsConfigFieldsTagConfig
	type: String
}

type SitePluginPluginOptionsSchemasPictureMainTagsConfigFieldsTagConfig {
	customtypes: [String]
	label: String
	select: String
}

type SitePluginPluginOptionsSchemasPictureMainTitle {
	config: SitePluginPluginOptionsSchemasPictureMainTitleConfig
	type: String
}

type SitePluginPluginOptionsSchemasPictureMainTitleConfig {
	label: String
}

type SitePluginPluginOptionsSchemasPictureMainUid {
	config: SitePluginPluginOptionsSchemasPictureMainUidConfig
	type: String
}

type SitePluginPluginOptionsSchemasPictureMainUidConfig {
	label: String
}

type SitePluginPluginOptionsSchemasSeries {
	Main: SitePluginPluginOptionsSchemasSeriesMain
}

type SitePluginPluginOptionsSchemasSeriesMain {
	title: SitePluginPluginOptionsSchemasSeriesMainTitle
	uid: SitePluginPluginOptionsSchemasSeriesMainUid
}

type SitePluginPluginOptionsSchemasSeriesMainTitle {
	config: SitePluginPluginOptionsSchemasSeriesMainTitleConfig
	type: String
}

type SitePluginPluginOptionsSchemasSeriesMainTitleConfig {
	label: String
}

type SitePluginPluginOptionsSchemasSeriesMainUid {
	config: SitePluginPluginOptionsSchemasSeriesMainUidConfig
	type: String
}

type SitePluginPluginOptionsSchemasSeriesMainUidConfig {
	label: String
}

type SitePluginPluginOptionsSchemasTags {
	Main: SitePluginPluginOptionsSchemasTagsMain
}

type SitePluginPluginOptionsSchemasTagsMain {
	title: SitePluginPluginOptionsSchemasTagsMainTitle
	uid: SitePluginPluginOptionsSchemasTagsMainUid
}

type SitePluginPluginOptionsSchemasTagsMainTitle {
	config: SitePluginPluginOptionsSchemasTagsMainTitleConfig
	type: String
}

type SitePluginPluginOptionsSchemasTagsMainTitleConfig {
	label: String
}

type SitePluginPluginOptionsSchemasTagsMainUid {
	config: SitePluginPluginOptionsSchemasTagsMainUidConfig
	type: String
}

type SitePluginPluginOptionsSchemasTagsMainUidConfig {
	label: String
}

type SitePluginPluginOptionsWorkboxConfig {
	globPatterns: [String]
}

type SiteSiteMetadata {
	description: String
	siteUrl: String
	title: String
}

enum DirectoryFieldsEnum {
	absolutePath
	accessTime
	atime
	atimeMs
	base
	birthTime
	birthtime
	birthtimeMs
	changeTime
	children
	children___children
	children___children___children
	children___children___children___children
	children___children___children___id
	children___children___id
	children___children___internal___content
	children___children___internal___contentDigest
	children___children___internal___description
	children___children___internal___fieldOwners
	children___children___internal___ignoreType
	children___children___internal___mediaType
	children___children___internal___owner
	children___children___internal___type
	children___children___parent___children
	children___children___parent___id
	children___id
	children___internal___content
	children___internal___contentDigest
	children___internal___description
	children___internal___fieldOwners
	children___internal___ignoreType
	children___internal___mediaType
	children___internal___owner
	children___internal___type
	children___parent___children
	children___parent___children___children
	children___parent___children___id
	children___parent___id
	children___parent___internal___content
	children___parent___internal___contentDigest
	children___parent___internal___description
	children___parent___internal___fieldOwners
	children___parent___internal___ignoreType
	children___parent___internal___mediaType
	children___parent___internal___owner
	children___parent___internal___type
	children___parent___parent___children
	children___parent___parent___id
	ctime
	ctimeMs
	dev
	dir
	ext
	extension
	gid
	id
	ino
	internal___content
	internal___contentDigest
	internal___description
	internal___fieldOwners
	internal___ignoreType
	internal___mediaType
	internal___owner
	internal___type
	mode
	modifiedTime
	mtime
	mtimeMs
	name
	nlink
	parent___children
	parent___children___children
	parent___children___children___children
	parent___children___children___id
	parent___children___id
	parent___children___internal___content
	parent___children___internal___contentDigest
	parent___children___internal___description
	parent___children___internal___fieldOwners
	parent___children___internal___ignoreType
	parent___children___internal___mediaType
	parent___children___internal___owner
	parent___children___internal___type
	parent___children___parent___children
	parent___children___parent___id
	parent___id
	parent___internal___content
	parent___internal___contentDigest
	parent___internal___description
	parent___internal___fieldOwners
	parent___internal___ignoreType
	parent___internal___mediaType
	parent___internal___owner
	parent___internal___type
	parent___parent___children
	parent___parent___children___children
	parent___parent___children___id
	parent___parent___id
	parent___parent___internal___content
	parent___parent___internal___contentDigest
	parent___parent___internal___description
	parent___parent___internal___fieldOwners
	parent___parent___internal___ignoreType
	parent___parent___internal___mediaType
	parent___parent___internal___owner
	parent___parent___internal___type
	parent___parent___parent___children
	parent___parent___parent___id
	prettySize
	rdev
	relativeDirectory
	relativePath
	root
	size
	sourceInstanceName
	uid
}

enum FileFieldsEnum {
	absolutePath
	accessTime
	atime
	atimeMs
	base
	birthTime
	birthtime
	birthtimeMs
	changeTime
	children
	children___children
	children___children___children
	children___children___children___children
	children___children___children___id
	children___children___id
	children___children___internal___content
	children___children___internal___contentDigest
	children___children___internal___description
	children___children___internal___fieldOwners
	children___children___internal___ignoreType
	children___children___internal___mediaType
	children___children___internal___owner
	children___children___internal___type
	children___children___parent___children
	children___children___parent___id
	children___id
	children___internal___content
	children___internal___contentDigest
	children___internal___description
	children___internal___fieldOwners
	children___internal___ignoreType
	children___internal___mediaType
	children___internal___owner
	children___internal___type
	children___parent___children
	children___parent___children___children
	children___parent___children___id
	children___parent___id
	children___parent___internal___content
	children___parent___internal___contentDigest
	children___parent___internal___description
	children___parent___internal___fieldOwners
	children___parent___internal___ignoreType
	children___parent___internal___mediaType
	children___parent___internal___owner
	children___parent___internal___type
	children___parent___parent___children
	children___parent___parent___id
	ctime
	ctimeMs
	dev
	dir
	ext
	extension
	gid
	id
	ino
	internal___content
	internal___contentDigest
	internal___description
	internal___fieldOwners
	internal___ignoreType
	internal___mediaType
	internal___owner
	internal___type
	mode
	modifiedTime
	mtime
	mtimeMs
	name
	nlink
	parent___children
	parent___children___children
	parent___children___children___children
	parent___children___children___id
	parent___children___id
	parent___children___internal___content
	parent___children___internal___contentDigest
	parent___children___internal___description
	parent___children___internal___fieldOwners
	parent___children___internal___ignoreType
	parent___children___internal___mediaType
	parent___children___internal___owner
	parent___children___internal___type
	parent___children___parent___children
	parent___children___parent___id
	parent___id
	parent___internal___content
	parent___internal___contentDigest
	parent___internal___description
	parent___internal___fieldOwners
	parent___internal___ignoreType
	parent___internal___mediaType
	parent___internal___owner
	parent___internal___type
	parent___parent___children
	parent___parent___children___children
	parent___parent___children___id
	parent___parent___id
	parent___parent___internal___content
	parent___parent___internal___contentDigest
	parent___parent___internal___description
	parent___parent___internal___fieldOwners
	parent___parent___internal___ignoreType
	parent___parent___internal___mediaType
	parent___parent___internal___owner
	parent___parent___internal___type
	parent___parent___parent___children
	parent___parent___parent___id
	prettySize
	rdev
	relativeDirectory
	relativePath
	root
	size
	sourceInstanceName
	uid
}

enum GatsbyImageLayout {
	CONSTRAINED
	FIXED
	FULL_WIDTH
}

enum ImgixPlaceholder {
	BLURRED
	DOMINANT_COLOR
	NONE
}

enum PrismicCategoryFieldsEnum {
	_previewable
	alternate_languages
	alternate_languages___id
	alternate_languages___lang
	alternate_languages___raw
	alternate_languages___type
	alternate_languages___uid
	children
	children___children
	children___children___children
	children___children___children___children
	children___children___children___id
	children___children___id
	children___children___internal___content
	children___children___internal___contentDigest
	children___children___internal___description
	children___children___internal___fieldOwners
	children___children___internal___ignoreType
	children___children___internal___mediaType
	children___children___internal___owner
	children___children___internal___type
	children___children___parent___children
	children___children___parent___id
	children___id
	children___internal___content
	children___internal___contentDigest
	children___internal___description
	children___internal___fieldOwners
	children___internal___ignoreType
	children___internal___mediaType
	children___internal___owner
	children___internal___type
	children___parent___children
	children___parent___children___children
	children___parent___children___id
	children___parent___id
	children___parent___internal___content
	children___parent___internal___contentDigest
	children___parent___internal___description
	children___parent___internal___fieldOwners
	children___parent___internal___ignoreType
	children___parent___internal___mediaType
	children___parent___internal___owner
	children___parent___internal___type
	children___parent___parent___children
	children___parent___parent___id
	dataRaw
	data___title
	first_publication_date
	href
	id
	internal___content
	internal___contentDigest
	internal___description
	internal___fieldOwners
	internal___ignoreType
	internal___mediaType
	internal___owner
	internal___type
	lang
	last_publication_date
	parent___children
	parent___children___children
	parent___children___children___children
	parent___children___children___id
	parent___children___id
	parent___children___internal___content
	parent___children___internal___contentDigest
	parent___children___internal___description
	parent___children___internal___fieldOwners
	parent___children___internal___ignoreType
	parent___children___internal___mediaType
	parent___children___internal___owner
	parent___children___internal___type
	parent___children___parent___children
	parent___children___parent___id
	parent___id
	parent___internal___content
	parent___internal___contentDigest
	parent___internal___description
	parent___internal___fieldOwners
	parent___internal___ignoreType
	parent___internal___mediaType
	parent___internal___owner
	parent___internal___type
	parent___parent___children
	parent___parent___children___children
	parent___parent___children___id
	parent___parent___id
	parent___parent___internal___content
	parent___parent___internal___contentDigest
	parent___parent___internal___description
	parent___parent___internal___fieldOwners
	parent___parent___internal___ignoreType
	parent___parent___internal___mediaType
	parent___parent___internal___owner
	parent___parent___internal___type
	parent___parent___parent___children
	parent___parent___parent___id
	prismicId
	tags
	type
	uid
	url
}

enum PrismicEmbedTypeFieldsEnum {
	children
	children___children
	children___children___children
	children___children___children___children
	children___children___children___id
	children___children___id
	children___children___internal___content
	children___children___internal___contentDigest
	children___children___internal___description
	children___children___internal___fieldOwners
	children___children___internal___ignoreType
	children___children___internal___mediaType
	children___children___internal___owner
	children___children___internal___type
	children___children___parent___children
	children___children___parent___id
	children___id
	children___internal___content
	children___internal___contentDigest
	children___internal___description
	children___internal___fieldOwners
	children___internal___ignoreType
	children___internal___mediaType
	children___internal___owner
	children___internal___type
	children___parent___children
	children___parent___children___children
	children___parent___children___id
	children___parent___id
	children___parent___internal___content
	children___parent___internal___contentDigest
	children___parent___internal___description
	children___parent___internal___fieldOwners
	children___parent___internal___ignoreType
	children___parent___internal___mediaType
	children___parent___internal___owner
	children___parent___internal___type
	children___parent___parent___children
	children___parent___parent___id
	id
	internal___content
	internal___contentDigest
	internal___description
	internal___fieldOwners
	internal___ignoreType
	internal___mediaType
	internal___owner
	internal___type
	parent___children
	parent___children___children
	parent___children___children___children
	parent___children___children___id
	parent___children___id
	parent___children___internal___content
	parent___children___internal___contentDigest
	parent___children___internal___description
	parent___children___internal___fieldOwners
	parent___children___internal___ignoreType
	parent___children___internal___mediaType
	parent___children___internal___owner
	parent___children___internal___type
	parent___children___parent___children
	parent___children___parent___id
	parent___id
	parent___internal___content
	parent___internal___contentDigest
	parent___internal___description
	parent___internal___fieldOwners
	parent___internal___ignoreType
	parent___internal___mediaType
	parent___internal___owner
	parent___internal___type
	parent___parent___children
	parent___parent___children___children
	parent___parent___children___id
	parent___parent___id
	parent___parent___internal___content
	parent___parent___internal___contentDigest
	parent___parent___internal___description
	parent___parent___internal___fieldOwners
	parent___parent___internal___ignoreType
	parent___parent___internal___mediaType
	parent___parent___internal___owner
	parent___parent___internal___type
	parent___parent___parent___children
	parent___parent___parent___id
}

enum PrismicLinkTypeEnum {
	Any
	Document
	Media
	Web
}

enum PrismicPictureFieldsEnum {
	_previewable
	alternate_languages
	alternate_languages___id
	alternate_languages___lang
	alternate_languages___raw
	alternate_languages___type
	alternate_languages___uid
	children
	children___children
	children___children___children
	children___children___children___children
	children___children___children___id
	children___children___id
	children___children___internal___content
	children___children___internal___contentDigest
	children___children___internal___description
	children___children___internal___fieldOwners
	children___children___internal___ignoreType
	children___children___internal___mediaType
	children___children___internal___owner
	children___children___internal___type
	children___children___parent___children
	children___children___parent___id
	children___id
	children___internal___content
	children___internal___contentDigest
	children___internal___description
	children___internal___fieldOwners
	children___internal___ignoreType
	children___internal___mediaType
	children___internal___owner
	children___internal___type
	children___parent___children
	children___parent___children___children
	children___parent___children___id
	children___parent___id
	children___parent___internal___content
	children___parent___internal___contentDigest
	children___parent___internal___description
	children___parent___internal___fieldOwners
	children___parent___internal___ignoreType
	children___parent___internal___mediaType
	children___parent___internal___owner
	children___parent___internal___type
	children___parent___parent___children
	children___parent___parent___id
	dataRaw
	data___category___id
	data___category___isBroken
	data___category___lang
	data___category___link_type
	data___category___localFile___absolutePath
	data___category___localFile___accessTime
	data___category___localFile___atime
	data___category___localFile___atimeMs
	data___category___localFile___base
	data___category___localFile___birthTime
	data___category___localFile___birthtime
	data___category___localFile___birthtimeMs
	data___category___localFile___changeTime
	data___category___localFile___children
	data___category___localFile___ctime
	data___category___localFile___ctimeMs
	data___category___localFile___dev
	data___category___localFile___dir
	data___category___localFile___ext
	data___category___localFile___extension
	data___category___localFile___gid
	data___category___localFile___id
	data___category___localFile___ino
	data___category___localFile___mode
	data___category___localFile___modifiedTime
	data___category___localFile___mtime
	data___category___localFile___mtimeMs
	data___category___localFile___name
	data___category___localFile___nlink
	data___category___localFile___prettySize
	data___category___localFile___rdev
	data___category___localFile___relativeDirectory
	data___category___localFile___relativePath
	data___category___localFile___root
	data___category___localFile___size
	data___category___localFile___sourceInstanceName
	data___category___localFile___uid
	data___category___raw
	data___category___size
	data___category___slug
	data___category___tags
	data___category___target
	data___category___type
	data___category___uid
	data___category___url
	data___coordinates___latitude
	data___coordinates___longitude
	data___datetime
	data___homepage
	data___image___alt
	data___image___copyright
	data___image___dimensions___height
	data___image___dimensions___width
	data___image___fixed___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___fixed___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___fixed___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___fixed___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___fixed___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___fixed___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___fixed___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___fixed___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___fluid___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___fluid___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___fluid___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___fluid___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___fluid___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___fluid___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___fluid___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___gatsbyImageData @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___absolutePath @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___accessTime @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___atime @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___atimeMs @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___base @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___birthTime @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___birthtime @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___birthtimeMs @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___changeTime @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___ctime @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___ctimeMs @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___dev @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___dir @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___ext @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___extension @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___gid @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___ino @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___mode @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___modifiedTime @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___mtime @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___mtimeMs @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___name @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___nlink @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___prettySize @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___rdev @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___relativeDirectory @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___relativePath @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___root @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___size @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___sourceInstanceName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___localFile___uid @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___image___url @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
	data___series___id
	data___series___isBroken
	data___series___lang
	data___series___link_type
	data___series___localFile___absolutePath
	data___series___localFile___accessTime
	data___series___localFile___atime
	data___series___localFile___atimeMs
	data___series___localFile___base
	data___series___localFile___birthTime
	data___series___localFile___birthtime
	data___series___localFile___birthtimeMs
	data___series___localFile___changeTime
	data___series___localFile___children
	data___series___localFile___ctime
	data___series___localFile___ctimeMs
	data___series___localFile___dev
	data___series___localFile___dir
	data___series___localFile___ext
	data___series___localFile___extension
	data___series___localFile___gid
	data___series___localFile___id
	data___series___localFile___ino
	data___series___localFile___mode
	data___series___localFile___modifiedTime
	data___series___localFile___mtime
	data___series___localFile___mtimeMs
	data___series___localFile___name
	data___series___localFile___nlink
	data___series___localFile___prettySize
	data___series___localFile___rdev
	data___series___localFile___relativeDirectory
	data___series___localFile___relativePath
	data___series___localFile___root
	data___series___localFile___size
	data___series___localFile___sourceInstanceName
	data___series___localFile___uid
	data___series___raw
	data___series___size
	data___series___slug
	data___series___tags
	data___series___target
	data___series___type
	data___series___uid
	data___series___url
	data___tags
	data___tags___tag___id
	data___tags___tag___isBroken
	data___tags___tag___lang
	data___tags___tag___link_type
	data___tags___tag___raw
	data___tags___tag___size
	data___tags___tag___slug
	data___tags___tag___tags
	data___tags___tag___target
	data___tags___tag___type
	data___tags___tag___uid
	data___tags___tag___url
	data___title
	first_publication_date
	href
	id
	internal___content
	internal___contentDigest
	internal___description
	internal___fieldOwners
	internal___ignoreType
	internal___mediaType
	internal___owner
	internal___type
	lang
	last_publication_date
	parent___children
	parent___children___children
	parent___children___children___children
	parent___children___children___id
	parent___children___id
	parent___children___internal___content
	parent___children___internal___contentDigest
	parent___children___internal___description
	parent___children___internal___fieldOwners
	parent___children___internal___ignoreType
	parent___children___internal___mediaType
	parent___children___internal___owner
	parent___children___internal___type
	parent___children___parent___children
	parent___children___parent___id
	parent___id
	parent___internal___content
	parent___internal___contentDigest
	parent___internal___description
	parent___internal___fieldOwners
	parent___internal___ignoreType
	parent___internal___mediaType
	parent___internal___owner
	parent___internal___type
	parent___parent___children
	parent___parent___children___children
	parent___parent___children___id
	parent___parent___id
	parent___parent___internal___content
	parent___parent___internal___contentDigest
	parent___parent___internal___description
	parent___parent___internal___fieldOwners
	parent___parent___internal___ignoreType
	parent___parent___internal___mediaType
	parent___parent___internal___owner
	parent___parent___internal___type
	parent___parent___parent___children
	parent___parent___parent___id
	prismicId
	tags
	type
	uid
	url
}

enum PrismicSeriesFieldsEnum {
	_previewable
	alternate_languages
	alternate_languages___id
	alternate_languages___lang
	alternate_languages___raw
	alternate_languages___type
	alternate_languages___uid
	children
	children___children
	children___children___children
	children___children___children___children
	children___children___children___id
	children___children___id
	children___children___internal___content
	children___children___internal___contentDigest
	children___children___internal___description
	children___children___internal___fieldOwners
	children___children___internal___ignoreType
	children___children___internal___mediaType
	children___children___internal___owner
	children___children___internal___type
	children___children___parent___children
	children___children___parent___id
	children___id
	children___internal___content
	children___internal___contentDigest
	children___internal___description
	children___internal___fieldOwners
	children___internal___ignoreType
	children___internal___mediaType
	children___internal___owner
	children___internal___type
	children___parent___children
	children___parent___children___children
	children___parent___children___id
	children___parent___id
	children___parent___internal___content
	children___parent___internal___contentDigest
	children___parent___internal___description
	children___parent___internal___fieldOwners
	children___parent___internal___ignoreType
	children___parent___internal___mediaType
	children___parent___internal___owner
	children___parent___internal___type
	children___parent___parent___children
	children___parent___parent___id
	dataRaw
	data___title
	first_publication_date
	href
	id
	internal___content
	internal___contentDigest
	internal___description
	internal___fieldOwners
	internal___ignoreType
	internal___mediaType
	internal___owner
	internal___type
	lang
	last_publication_date
	parent___children
	parent___children___children
	parent___children___children___children
	parent___children___children___id
	parent___children___id
	parent___children___internal___content
	parent___children___internal___contentDigest
	parent___children___internal___description
	parent___children___internal___fieldOwners
	parent___children___internal___ignoreType
	parent___children___internal___mediaType
	parent___children___internal___owner
	parent___children___internal___type
	parent___children___parent___children
	parent___children___parent___id
	parent___id
	parent___internal___content
	parent___internal___contentDigest
	parent___internal___description
	parent___internal___fieldOwners
	parent___internal___ignoreType
	parent___internal___mediaType
	parent___internal___owner
	parent___internal___type
	parent___parent___children
	parent___parent___children___children
	parent___parent___children___id
	parent___parent___id
	parent___parent___internal___content
	parent___parent___internal___contentDigest
	parent___parent___internal___description
	parent___parent___internal___fieldOwners
	parent___parent___internal___ignoreType
	parent___parent___internal___mediaType
	parent___parent___internal___owner
	parent___parent___internal___type
	parent___parent___parent___children
	parent___parent___parent___id
	prismicId
	tags
	type
	uid
	url
}

enum PrismicTagsFieldsEnum {
	_previewable
	alternate_languages
	alternate_languages___id
	alternate_languages___lang
	alternate_languages___raw
	alternate_languages___type
	alternate_languages___uid
	children
	children___children
	children___children___children
	children___children___children___children
	children___children___children___id
	children___children___id
	children___children___internal___content
	children___children___internal___contentDigest
	children___children___internal___description
	children___children___internal___fieldOwners
	children___children___internal___ignoreType
	children___children___internal___mediaType
	children___children___internal___owner
	children___children___internal___type
	children___children___parent___children
	children___children___parent___id
	children___id
	children___internal___content
	children___internal___contentDigest
	children___internal___description
	children___internal___fieldOwners
	children___internal___ignoreType
	children___internal___mediaType
	children___internal___owner
	children___internal___type
	children___parent___children
	children___parent___children___children
	children___parent___children___id
	children___parent___id
	children___parent___internal___content
	children___parent___internal___contentDigest
	children___parent___internal___description
	children___parent___internal___fieldOwners
	children___parent___internal___ignoreType
	children___parent___internal___mediaType
	children___parent___internal___owner
	children___parent___internal___type
	children___parent___parent___children
	children___parent___parent___id
	dataRaw
	data___title
	first_publication_date
	href
	id
	internal___content
	internal___contentDigest
	internal___description
	internal___fieldOwners
	internal___ignoreType
	internal___mediaType
	internal___owner
	internal___type
	lang
	last_publication_date
	parent___children
	parent___children___children
	parent___children___children___children
	parent___children___children___id
	parent___children___id
	parent___children___internal___content
	parent___children___internal___contentDigest
	parent___children___internal___description
	parent___children___internal___fieldOwners
	parent___children___internal___ignoreType
	parent___children___internal___mediaType
	parent___children___internal___owner
	parent___children___internal___type
	parent___children___parent___children
	parent___children___parent___id
	parent___id
	parent___internal___content
	parent___internal___contentDigest
	parent___internal___description
	parent___internal___fieldOwners
	parent___internal___ignoreType
	parent___internal___mediaType
	parent___internal___owner
	parent___internal___type
	parent___parent___children
	parent___parent___children___children
	parent___parent___children___id
	parent___parent___id
	parent___parent___internal___content
	parent___parent___internal___contentDigest
	parent___parent___internal___description
	parent___parent___internal___fieldOwners
	parent___parent___internal___ignoreType
	parent___parent___internal___mediaType
	parent___parent___internal___owner
	parent___parent___internal___type
	parent___parent___parent___children
	parent___parent___parent___id
	prismicId
	tags
	type
	uid
	url
}

enum PrismicTypePathTypeFieldsEnum {
	children
	children___children
	children___children___children
	children___children___children___children
	children___children___children___id
	children___children___id
	children___children___internal___content
	children___children___internal___contentDigest
	children___children___internal___description
	children___children___internal___fieldOwners
	children___children___internal___ignoreType
	children___children___internal___mediaType
	children___children___internal___owner
	children___children___internal___type
	children___children___parent___children
	children___children___parent___id
	children___id
	children___internal___content
	children___internal___contentDigest
	children___internal___description
	children___internal___fieldOwners
	children___internal___ignoreType
	children___internal___mediaType
	children___internal___owner
	children___internal___type
	children___parent___children
	children___parent___children___children
	children___parent___children___id
	children___parent___id
	children___parent___internal___content
	children___parent___internal___contentDigest
	children___parent___internal___description
	children___parent___internal___fieldOwners
	children___parent___internal___ignoreType
	children___parent___internal___mediaType
	children___parent___internal___owner
	children___parent___internal___type
	children___parent___parent___children
	children___parent___parent___id
	id
	internal___content
	internal___contentDigest
	internal___description
	internal___fieldOwners
	internal___ignoreType
	internal___mediaType
	internal___owner
	internal___type
	parent___children
	parent___children___children
	parent___children___children___children
	parent___children___children___id
	parent___children___id
	parent___children___internal___content
	parent___children___internal___contentDigest
	parent___children___internal___description
	parent___children___internal___fieldOwners
	parent___children___internal___ignoreType
	parent___children___internal___mediaType
	parent___children___internal___owner
	parent___children___internal___type
	parent___children___parent___children
	parent___children___parent___id
	parent___id
	parent___internal___content
	parent___internal___contentDigest
	parent___internal___description
	parent___internal___fieldOwners
	parent___internal___ignoreType
	parent___internal___mediaType
	parent___internal___owner
	parent___internal___type
	parent___parent___children
	parent___parent___children___children
	parent___parent___children___id
	parent___parent___id
	parent___parent___internal___content
	parent___parent___internal___contentDigest
	parent___parent___internal___description
	parent___parent___internal___fieldOwners
	parent___parent___internal___ignoreType
	parent___parent___internal___mediaType
	parent___parent___internal___owner
	parent___parent___internal___type
	parent___parent___parent___children
	parent___parent___parent___id
	path
	type
}

enum SiteBuildMetadataFieldsEnum {
	buildTime
	children
	children___children
	children___children___children
	children___children___children___children
	children___children___children___id
	children___children___id
	children___children___internal___content
	children___children___internal___contentDigest
	children___children___internal___description
	children___children___internal___fieldOwners
	children___children___internal___ignoreType
	children___children___internal___mediaType
	children___children___internal___owner
	children___children___internal___type
	children___children___parent___children
	children___children___parent___id
	children___id
	children___internal___content
	children___internal___contentDigest
	children___internal___description
	children___internal___fieldOwners
	children___internal___ignoreType
	children___internal___mediaType
	children___internal___owner
	children___internal___type
	children___parent___children
	children___parent___children___children
	children___parent___children___id
	children___parent___id
	children___parent___internal___content
	children___parent___internal___contentDigest
	children___parent___internal___description
	children___parent___internal___fieldOwners
	children___parent___internal___ignoreType
	children___parent___internal___mediaType
	children___parent___internal___owner
	children___parent___internal___type
	children___parent___parent___children
	children___parent___parent___id
	id
	internal___content
	internal___contentDigest
	internal___description
	internal___fieldOwners
	internal___ignoreType
	internal___mediaType
	internal___owner
	internal___type
	parent___children
	parent___children___children
	parent___children___children___children
	parent___children___children___id
	parent___children___id
	parent___children___internal___content
	parent___children___internal___contentDigest
	parent___children___internal___description
	parent___children___internal___fieldOwners
	parent___children___internal___ignoreType
	parent___children___internal___mediaType
	parent___children___internal___owner
	parent___children___internal___type
	parent___children___parent___children
	parent___children___parent___id
	parent___id
	parent___internal___content
	parent___internal___contentDigest
	parent___internal___description
	parent___internal___fieldOwners
	parent___internal___ignoreType
	parent___internal___mediaType
	parent___internal___owner
	parent___internal___type
	parent___parent___children
	parent___parent___children___children
	parent___parent___children___id
	parent___parent___id
	parent___parent___internal___content
	parent___parent___internal___contentDigest
	parent___parent___internal___description
	parent___parent___internal___fieldOwners
	parent___parent___internal___ignoreType
	parent___parent___internal___mediaType
	parent___parent___internal___owner
	parent___parent___internal___type
	parent___parent___parent___children
	parent___parent___parent___id
}

enum SiteFieldsEnum {
	buildTime
	children
	children___children
	children___children___children
	children___children___children___children
	children___children___children___id
	children___children___id
	children___children___internal___content
	children___children___internal___contentDigest
	children___children___internal___description
	children___children___internal___fieldOwners
	children___children___internal___ignoreType
	children___children___internal___mediaType
	children___children___internal___owner
	children___children___internal___type
	children___children___parent___children
	children___children___parent___id
	children___id
	children___internal___content
	children___internal___contentDigest
	children___internal___description
	children___internal___fieldOwners
	children___internal___ignoreType
	children___internal___mediaType
	children___internal___owner
	children___internal___type
	children___parent___children
	children___parent___children___children
	children___parent___children___id
	children___parent___id
	children___parent___internal___content
	children___parent___internal___contentDigest
	children___parent___internal___description
	children___parent___internal___fieldOwners
	children___parent___internal___ignoreType
	children___parent___internal___mediaType
	children___parent___internal___owner
	children___parent___internal___type
	children___parent___parent___children
	children___parent___parent___id
	host
	id
	internal___content
	internal___contentDigest
	internal___description
	internal___fieldOwners
	internal___ignoreType
	internal___mediaType
	internal___owner
	internal___type
	parent___children
	parent___children___children
	parent___children___children___children
	parent___children___children___id
	parent___children___id
	parent___children___internal___content
	parent___children___internal___contentDigest
	parent___children___internal___description
	parent___children___internal___fieldOwners
	parent___children___internal___ignoreType
	parent___children___internal___mediaType
	parent___children___internal___owner
	parent___children___internal___type
	parent___children___parent___children
	parent___children___parent___id
	parent___id
	parent___internal___content
	parent___internal___contentDigest
	parent___internal___description
	parent___internal___fieldOwners
	parent___internal___ignoreType
	parent___internal___mediaType
	parent___internal___owner
	parent___internal___type
	parent___parent___children
	parent___parent___children___children
	parent___parent___children___id
	parent___parent___id
	parent___parent___internal___content
	parent___parent___internal___contentDigest
	parent___parent___internal___description
	parent___parent___internal___fieldOwners
	parent___parent___internal___ignoreType
	parent___parent___internal___mediaType
	parent___parent___internal___owner
	parent___parent___internal___type
	parent___parent___parent___children
	parent___parent___parent___id
	pathPrefix
	polyfill
	port
	siteMetadata___description
	siteMetadata___siteUrl
	siteMetadata___title
}

enum SiteFunctionFieldsEnum {
	absoluteCompiledFilePath
	children
	children___children
	children___children___children
	children___children___children___children
	children___children___children___id
	children___children___id
	children___children___internal___content
	children___children___internal___contentDigest
	children___children___internal___description
	children___children___internal___fieldOwners
	children___children___internal___ignoreType
	children___children___internal___mediaType
	children___children___internal___owner
	children___children___internal___type
	children___children___parent___children
	children___children___parent___id
	children___id
	children___internal___content
	children___internal___contentDigest
	children___internal___description
	children___internal___fieldOwners
	children___internal___ignoreType
	children___internal___mediaType
	children___internal___owner
	children___internal___type
	children___parent___children
	children___parent___children___children
	children___parent___children___id
	children___parent___id
	children___parent___internal___content
	children___parent___internal___contentDigest
	children___parent___internal___description
	children___parent___internal___fieldOwners
	children___parent___internal___ignoreType
	children___parent___internal___mediaType
	children___parent___internal___owner
	children___parent___internal___type
	children___parent___parent___children
	children___parent___parent___id
	functionRoute
	id
	internal___content
	internal___contentDigest
	internal___description
	internal___fieldOwners
	internal___ignoreType
	internal___mediaType
	internal___owner
	internal___type
	matchPath
	originalAbsoluteFilePath
	originalRelativeFilePath
	parent___children
	parent___children___children
	parent___children___children___children
	parent___children___children___id
	parent___children___id
	parent___children___internal___content
	parent___children___internal___contentDigest
	parent___children___internal___description
	parent___children___internal___fieldOwners
	parent___children___internal___ignoreType
	parent___children___internal___mediaType
	parent___children___internal___owner
	parent___children___internal___type
	parent___children___parent___children
	parent___children___parent___id
	parent___id
	parent___internal___content
	parent___internal___contentDigest
	parent___internal___description
	parent___internal___fieldOwners
	parent___internal___ignoreType
	parent___internal___mediaType
	parent___internal___owner
	parent___internal___type
	parent___parent___children
	parent___parent___children___children
	parent___parent___children___id
	parent___parent___id
	parent___parent___internal___content
	parent___parent___internal___contentDigest
	parent___parent___internal___description
	parent___parent___internal___fieldOwners
	parent___parent___internal___ignoreType
	parent___parent___internal___mediaType
	parent___parent___internal___owner
	parent___parent___internal___type
	parent___parent___parent___children
	parent___parent___parent___id
	pluginName
	relativeCompiledFilePath
}

enum SitePageFieldsEnum {
	children
	children___children
	children___children___children
	children___children___children___children
	children___children___children___id
	children___children___id
	children___children___internal___content
	children___children___internal___contentDigest
	children___children___internal___description
	children___children___internal___fieldOwners
	children___children___internal___ignoreType
	children___children___internal___mediaType
	children___children___internal___owner
	children___children___internal___type
	children___children___parent___children
	children___children___parent___id
	children___id
	children___internal___content
	children___internal___contentDigest
	children___internal___description
	children___internal___fieldOwners
	children___internal___ignoreType
	children___internal___mediaType
	children___internal___owner
	children___internal___type
	children___parent___children
	children___parent___children___children
	children___parent___children___id
	children___parent___id
	children___parent___internal___content
	children___parent___internal___contentDigest
	children___parent___internal___description
	children___parent___internal___fieldOwners
	children___parent___internal___ignoreType
	children___parent___internal___mediaType
	children___parent___internal___owner
	children___parent___internal___type
	children___parent___parent___children
	children___parent___parent___id
	component
	componentChunkName
	context___uid
	id
	internalComponentName
	internal___content
	internal___contentDigest
	internal___description
	internal___fieldOwners
	internal___ignoreType
	internal___mediaType
	internal___owner
	internal___type
	isCreatedByStatefulCreatePages
	matchPath
	parent___children
	parent___children___children
	parent___children___children___children
	parent___children___children___id
	parent___children___id
	parent___children___internal___content
	parent___children___internal___contentDigest
	parent___children___internal___description
	parent___children___internal___fieldOwners
	parent___children___internal___ignoreType
	parent___children___internal___mediaType
	parent___children___internal___owner
	parent___children___internal___type
	parent___children___parent___children
	parent___children___parent___id
	parent___id
	parent___internal___content
	parent___internal___contentDigest
	parent___internal___description
	parent___internal___fieldOwners
	parent___internal___ignoreType
	parent___internal___mediaType
	parent___internal___owner
	parent___internal___type
	parent___parent___children
	parent___parent___children___children
	parent___parent___children___id
	parent___parent___id
	parent___parent___internal___content
	parent___parent___internal___contentDigest
	parent___parent___internal___description
	parent___parent___internal___fieldOwners
	parent___parent___internal___ignoreType
	parent___parent___internal___mediaType
	parent___parent___internal___owner
	parent___parent___internal___type
	parent___parent___parent___children
	parent___parent___parent___id
	path
	pluginCreatorId
	pluginCreator___browserAPIs
	pluginCreator___children
	pluginCreator___children___children
	pluginCreator___children___children___children
	pluginCreator___children___children___id
	pluginCreator___children___id
	pluginCreator___children___internal___content
	pluginCreator___children___internal___contentDigest
	pluginCreator___children___internal___description
	pluginCreator___children___internal___fieldOwners
	pluginCreator___children___internal___ignoreType
	pluginCreator___children___internal___mediaType
	pluginCreator___children___internal___owner
	pluginCreator___children___internal___type
	pluginCreator___children___parent___children
	pluginCreator___children___parent___id
	pluginCreator___id
	pluginCreator___internal___content
	pluginCreator___internal___contentDigest
	pluginCreator___internal___description
	pluginCreator___internal___fieldOwners
	pluginCreator___internal___ignoreType
	pluginCreator___internal___mediaType
	pluginCreator___internal___owner
	pluginCreator___internal___type
	pluginCreator___name
	pluginCreator___nodeAPIs
	pluginCreator___packageJson___dependencies
	pluginCreator___packageJson___dependencies___name
	pluginCreator___packageJson___dependencies___version
	pluginCreator___packageJson___description
	pluginCreator___packageJson___devDependencies
	pluginCreator___packageJson___devDependencies___name
	pluginCreator___packageJson___devDependencies___version
	pluginCreator___packageJson___keywords
	pluginCreator___packageJson___license
	pluginCreator___packageJson___main
	pluginCreator___packageJson___name
	pluginCreator___packageJson___peerDependencies
	pluginCreator___packageJson___peerDependencies___name
	pluginCreator___packageJson___peerDependencies___version
	pluginCreator___packageJson___version
	pluginCreator___parent___children
	pluginCreator___parent___children___children
	pluginCreator___parent___children___id
	pluginCreator___parent___id
	pluginCreator___parent___internal___content
	pluginCreator___parent___internal___contentDigest
	pluginCreator___parent___internal___description
	pluginCreator___parent___internal___fieldOwners
	pluginCreator___parent___internal___ignoreType
	pluginCreator___parent___internal___mediaType
	pluginCreator___parent___internal___owner
	pluginCreator___parent___internal___type
	pluginCreator___parent___parent___children
	pluginCreator___parent___parent___id
	pluginCreator___pluginFilepath
	pluginCreator___pluginOptions___accessToken
	pluginCreator___pluginOptions___allExtensions
	pluginCreator___pluginOptions___allPageHeaders
	pluginCreator___pluginOptions___apiEndpoint
	pluginCreator___pluginOptions___autoLabel
	pluginCreator___pluginOptions___background_color
	pluginCreator___pluginOptions___cache_busting_mode
	pluginCreator___pluginOptions___createLinkInHead
	pluginCreator___pluginOptions___crossOrigin
	pluginCreator___pluginOptions___cssPropOptimization
	pluginCreator___pluginOptions___description
	pluginCreator___pluginOptions___directives___connect_src
	pluginCreator___pluginOptions___directives___font_src
	pluginCreator___pluginOptions___directives___frame_src
	pluginCreator___pluginOptions___directives___img_src
	pluginCreator___pluginOptions___directives___prefetch_src
	pluginCreator___pluginOptions___directives___script_src
	pluginCreator___pluginOptions___directives___style_src
	pluginCreator___pluginOptions___disableOnDev
	pluginCreator___pluginOptions___display
	pluginCreator___pluginOptions___entryLimit
	pluginCreator___pluginOptions___icon
	pluginCreator___pluginOptions___icon_options___purpose
	pluginCreator___pluginOptions___imageImgixParams___auto
	pluginCreator___pluginOptions___imageImgixParams___fit
	pluginCreator___pluginOptions___imageImgixParams___q
	pluginCreator___pluginOptions___imagePlaceholderImgixParams___blur
	pluginCreator___pluginOptions___imagePlaceholderImgixParams___w
	pluginCreator___pluginOptions___include_favicon
	pluginCreator___pluginOptions___isTSX
	pluginCreator___pluginOptions___jsxPragma
	pluginCreator___pluginOptions___labelFormat
	pluginCreator___pluginOptions___lang
	pluginCreator___pluginOptions___legacy
	pluginCreator___pluginOptions___mergeDefaultDirectives
	pluginCreator___pluginOptions___mergeScriptHashes
	pluginCreator___pluginOptions___mergeStyleHashes
	pluginCreator___pluginOptions___name
	pluginCreator___pluginOptions___output
	pluginCreator___pluginOptions___path
	pluginCreator___pluginOptions___pathCheck
	pluginCreator___pluginOptions___query
	pluginCreator___pluginOptions___repositoryName
	pluginCreator___pluginOptions___short_name
	pluginCreator___pluginOptions___sourceMap
	pluginCreator___pluginOptions___start_url
	pluginCreator___pluginOptions___theme_color
	pluginCreator___pluginOptions___theme_color_in_head
	pluginCreator___pluginOptions___workboxConfig___globPatterns
	pluginCreator___resolve
	pluginCreator___ssrAPIs
	pluginCreator___version
}

enum SitePluginFieldsEnum {
	browserAPIs
	children
	children___children
	children___children___children
	children___children___children___children
	children___children___children___id
	children___children___id
	children___children___internal___content
	children___children___internal___contentDigest
	children___children___internal___description
	children___children___internal___fieldOwners
	children___children___internal___ignoreType
	children___children___internal___mediaType
	children___children___internal___owner
	children___children___internal___type
	children___children___parent___children
	children___children___parent___id
	children___id
	children___internal___content
	children___internal___contentDigest
	children___internal___description
	children___internal___fieldOwners
	children___internal___ignoreType
	children___internal___mediaType
	children___internal___owner
	children___internal___type
	children___parent___children
	children___parent___children___children
	children___parent___children___id
	children___parent___id
	children___parent___internal___content
	children___parent___internal___contentDigest
	children___parent___internal___description
	children___parent___internal___fieldOwners
	children___parent___internal___ignoreType
	children___parent___internal___mediaType
	children___parent___internal___owner
	children___parent___internal___type
	children___parent___parent___children
	children___parent___parent___id
	id
	internal___content
	internal___contentDigest
	internal___description
	internal___fieldOwners
	internal___ignoreType
	internal___mediaType
	internal___owner
	internal___type
	name
	nodeAPIs
	packageJson___dependencies
	packageJson___dependencies___name
	packageJson___dependencies___version
	packageJson___description
	packageJson___devDependencies
	packageJson___devDependencies___name
	packageJson___devDependencies___version
	packageJson___keywords
	packageJson___license
	packageJson___main
	packageJson___name
	packageJson___peerDependencies
	packageJson___peerDependencies___name
	packageJson___peerDependencies___version
	packageJson___version
	parent___children
	parent___children___children
	parent___children___children___children
	parent___children___children___id
	parent___children___id
	parent___children___internal___content
	parent___children___internal___contentDigest
	parent___children___internal___description
	parent___children___internal___fieldOwners
	parent___children___internal___ignoreType
	parent___children___internal___mediaType
	parent___children___internal___owner
	parent___children___internal___type
	parent___children___parent___children
	parent___children___parent___id
	parent___id
	parent___internal___content
	parent___internal___contentDigest
	parent___internal___description
	parent___internal___fieldOwners
	parent___internal___ignoreType
	parent___internal___mediaType
	parent___internal___owner
	parent___internal___type
	parent___parent___children
	parent___parent___children___children
	parent___parent___children___id
	parent___parent___id
	parent___parent___internal___content
	parent___parent___internal___contentDigest
	parent___parent___internal___description
	parent___parent___internal___fieldOwners
	parent___parent___internal___ignoreType
	parent___parent___internal___mediaType
	parent___parent___internal___owner
	parent___parent___internal___type
	parent___parent___parent___children
	parent___parent___parent___id
	pluginFilepath
	pluginOptions___accessToken
	pluginOptions___allExtensions
	pluginOptions___allPageHeaders
	pluginOptions___apiEndpoint
	pluginOptions___autoLabel
	pluginOptions___background_color
	pluginOptions___cache_busting_mode
	pluginOptions___createLinkInHead
	pluginOptions___crossOrigin
	pluginOptions___cssPropOptimization
	pluginOptions___description
	pluginOptions___directives___connect_src
	pluginOptions___directives___font_src
	pluginOptions___directives___frame_src
	pluginOptions___directives___img_src
	pluginOptions___directives___prefetch_src
	pluginOptions___directives___script_src
	pluginOptions___directives___style_src
	pluginOptions___disableOnDev
	pluginOptions___display
	pluginOptions___entryLimit
	pluginOptions___icon
	pluginOptions___icon_options___purpose
	pluginOptions___imageImgixParams___auto
	pluginOptions___imageImgixParams___fit
	pluginOptions___imageImgixParams___q
	pluginOptions___imagePlaceholderImgixParams___blur
	pluginOptions___imagePlaceholderImgixParams___w
	pluginOptions___include_favicon
	pluginOptions___isTSX
	pluginOptions___jsxPragma
	pluginOptions___labelFormat
	pluginOptions___lang
	pluginOptions___legacy
	pluginOptions___mergeDefaultDirectives
	pluginOptions___mergeScriptHashes
	pluginOptions___mergeStyleHashes
	pluginOptions___name
	pluginOptions___output
	pluginOptions___path
	pluginOptions___pathCheck
	pluginOptions___query
	pluginOptions___repositoryName
	pluginOptions___short_name
	pluginOptions___sourceMap
	pluginOptions___start_url
	pluginOptions___theme_color
	pluginOptions___theme_color_in_head
	pluginOptions___workboxConfig___globPatterns
	resolve
	ssrAPIs
	version
}

enum SortOrderEnum {
	ASC
	DESC
}

input BooleanQueryOperatorInput {
	eq: Boolean
	in: [Boolean]
	ne: Boolean
	nin: [Boolean]
}

input DateQueryOperatorInput {
	eq: Date
	gt: Date
	gte: Date
	in: [Date]
	lt: Date
	lte: Date
	ne: Date
	nin: [Date]
}

input DirectoryFilterInput {
	absolutePath: StringQueryOperatorInput
	accessTime: DateQueryOperatorInput
	atime: DateQueryOperatorInput
	atimeMs: FloatQueryOperatorInput
	base: StringQueryOperatorInput
	birthTime: DateQueryOperatorInput
	birthtime: DateQueryOperatorInput
	birthtimeMs: FloatQueryOperatorInput
	changeTime: DateQueryOperatorInput
	children: NodeFilterListInput
	ctime: DateQueryOperatorInput
	ctimeMs: FloatQueryOperatorInput
	dev: IntQueryOperatorInput
	dir: StringQueryOperatorInput
	ext: StringQueryOperatorInput
	extension: StringQueryOperatorInput
	gid: IntQueryOperatorInput
	id: StringQueryOperatorInput
	ino: FloatQueryOperatorInput
	internal: InternalFilterInput
	mode: IntQueryOperatorInput
	modifiedTime: DateQueryOperatorInput
	mtime: DateQueryOperatorInput
	mtimeMs: FloatQueryOperatorInput
	name: StringQueryOperatorInput
	nlink: IntQueryOperatorInput
	parent: NodeFilterInput
	prettySize: StringQueryOperatorInput
	rdev: IntQueryOperatorInput
	relativeDirectory: StringQueryOperatorInput
	relativePath: StringQueryOperatorInput
	root: StringQueryOperatorInput
	size: IntQueryOperatorInput
	sourceInstanceName: StringQueryOperatorInput
	uid: IntQueryOperatorInput
}

input DirectorySortInput {
	fields: [DirectoryFieldsEnum]
	order: [SortOrderEnum] = [ASC]
}

input FileFilterInput {
	absolutePath: StringQueryOperatorInput
	accessTime: DateQueryOperatorInput
	atime: DateQueryOperatorInput
	atimeMs: FloatQueryOperatorInput
	base: StringQueryOperatorInput
	birthTime: DateQueryOperatorInput
	birthtime: DateQueryOperatorInput
	birthtimeMs: FloatQueryOperatorInput
	changeTime: DateQueryOperatorInput
	children: NodeFilterListInput
	ctime: DateQueryOperatorInput
	ctimeMs: FloatQueryOperatorInput
	dev: IntQueryOperatorInput
	dir: StringQueryOperatorInput
	ext: StringQueryOperatorInput
	extension: StringQueryOperatorInput
	gid: IntQueryOperatorInput
	id: StringQueryOperatorInput
	ino: FloatQueryOperatorInput
	internal: InternalFilterInput
	mode: IntQueryOperatorInput
	modifiedTime: DateQueryOperatorInput
	mtime: DateQueryOperatorInput
	mtimeMs: FloatQueryOperatorInput
	name: StringQueryOperatorInput
	nlink: IntQueryOperatorInput
	parent: NodeFilterInput
	prettySize: StringQueryOperatorInput
	rdev: IntQueryOperatorInput
	relativeDirectory: StringQueryOperatorInput
	relativePath: StringQueryOperatorInput
	root: StringQueryOperatorInput
	size: IntQueryOperatorInput
	sourceInstanceName: StringQueryOperatorInput
	uid: IntQueryOperatorInput
}

input FileSortInput {
	fields: [FileFieldsEnum]
	order: [SortOrderEnum] = [ASC]
}

input FloatQueryOperatorInput {
	eq: Float
	gt: Float
	gte: Float
	in: [Float]
	lt: Float
	lte: Float
	ne: Float
	nin: [Float]
}

input IDQueryOperatorInput {
	eq: ID
	in: [ID]
	ne: ID
	nin: [ID]
}

input ImgixFixedFilterInput {
	base64: StringQueryOperatorInput
	height: IntQueryOperatorInput
	sizes: StringQueryOperatorInput
	src: StringQueryOperatorInput
	srcSet: StringQueryOperatorInput
	srcSetWebp: StringQueryOperatorInput
	srcWebp: StringQueryOperatorInput
	width: IntQueryOperatorInput
}

input ImgixFluidFilterInput {
	aspectRatio: FloatQueryOperatorInput
	base64: StringQueryOperatorInput
	sizes: StringQueryOperatorInput
	src: StringQueryOperatorInput
	srcSet: StringQueryOperatorInput
	srcSetWebp: StringQueryOperatorInput
	srcWebp: StringQueryOperatorInput
}

input ImgixParamsInput {
	"Alias for `pdfAnnotation`."
	annotation: Boolean
	"Specifies an aspect ratio to maintain when resizing and cropping the image. [See docs](https://docs.imgix.com/apis/url/size/ar)."
	ar: String
	"Applies automatic enhancements to images. [See docs](https://docs.imgix.com/apis/url/auto)."
	auto: String
	"Alias for `blend`."
	b: String
	"Alias for `blendAlign`."
	ba: String
	"Alias for `blendAlpha`."
	balph: Int
	"Alias for `blendCrop`."
	bc: String
	"Alias for `blendFit`."
	bf: String
	"Colors the background of padded and partially-transparent images. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/bg)."
	bg: String
	"Alias for `blendH`."
	bh: Float
	"Specifies the location of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend)."
	blend: String
	"Changes the blend alignment relative to the parent image. [See docs](https://docs.imgix.com/apis/url/blending/blend-align)."
	blendAlign: String
	"Changes the alpha of the blend image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/blending/blend-alpha)."
	blendAlpha: Int
	"Alias for `blendColor`."
	blendClr: String
	"Specifies a color to use when applying the blend. [See docs](https://docs.imgix.com/apis/url/blending/blend-color)."
	blendColor: String
	"Specifies the type of crop for blend images. [See docs](https://docs.imgix.com/apis/url/blending/blend-crop)."
	blendCrop: String
	"Specifies the fit mode for blend images. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/blending/blend-fit)."
	blendFit: String
	"Adjusts the height of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-h)."
	blendH: Float
	"Sets the blend mode for a blend image. Default: `overlay`. [See docs](https://docs.imgix.com/apis/url/blending/blend-mode)."
	blendMode: String
	"Applies padding to the blend image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-pad)."
	blendPad: Int
	"Adjusts the size of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-size)."
	blendSize: String
	"Adjusts the width of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-w)."
	blendW: Float
	"Adjusts the x-offset of the blend image relative to its parent. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-x)."
	blendX: Int
	"Adjusts the y-offset of the blend image relative to its parent. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-y)."
	blendY: Int
	"Alias for `blendAlign`."
	blendalign: String
	"Alias for `blendAlpha`."
	blendalpha: Int
	"Alias for `blendColor`."
	blendclr: String
	"Alias for `blendColor`."
	blendcolor: String
	"Alias for `blendCrop`."
	blendcrop: String
	"Alias for `blendFit`."
	blendfit: String
	"Alias for `blendH`."
	blendh: Float
	"Alias for `blendMode`."
	blendmode: String
	"Alias for `blendPad`."
	blendpad: Int
	"Alias for `blendSize`."
	blendsize: String
	"Alias for `blendW`."
	blendw: Float
	"Alias for `blendX`."
	blendx: Int
	"Alias for `blendY`."
	blendy: Int
	"Applies a gaussian blur to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/blur)."
	blur: Int
	"Alias for `blendMode`."
	bm: String
	"Applies a border to an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border)."
	border: String
	"Sets bottom border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-bottom)."
	borderBottom: Int
	"Sets left border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-left)."
	borderLeft: Int
	"Sets the outer radius of the image's border in pixels. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-radius)."
	borderRadius: String
	"Sets the inner radius of the image's border in pixels. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-radius-inner)."
	borderRadiusInner: String
	"Sets right border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-right)."
	borderRight: Int
	"Sets top border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-top)."
	borderTop: Int
	"Alias for `blendPad`."
	bp: Int
	"Adjusts the brightness of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/bri)."
	bri: Int
	"Alias for `blendSize`."
	bs: String
	"Alias for `blendW`."
	bw: Float
	"Alias for `blendX`."
	bx: Int
	"Alias for `blendY`."
	by: Int
	"Sets one or more Client-Hints headers. [See docs](https://docs.imgix.com/apis/url/format/ch)."
	ch: String
	"Specifies the output chroma subsampling rate. Default: `420`. [See docs](https://docs.imgix.com/apis/url/format/chromasub)."
	chromasub: Int
	"Limits the number of unique colors in an image. [See docs](https://docs.imgix.com/apis/url/format/colorquant)."
	colorquant: Int
	"Specifies how many colors to include in a palette-extraction response. Default: `6`. [See docs](https://docs.imgix.com/apis/url/color-palette/colors)."
	colors: Int
	"Adjusts the contrast of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/con)."
	con: Int
	"Specifies the radius value for a rounded corner mask. [See docs](https://docs.imgix.com/apis/url/mask/corner-radius)."
	cornerRadius: String
	"Specifies how to crop an image. [See docs](https://docs.imgix.com/apis/url/size/crop)."
	crop: String
	"Specifies the color space of the output image. [See docs](https://docs.imgix.com/apis/url/format/cs)."
	cs: String
	"Forces a URL to use send-file in its response. [See docs](https://docs.imgix.com/apis/url/format/dl)."
	dl: String
	"Sets the DPI value in the EXIF header. [See docs](https://docs.imgix.com/apis/url/format/dpi)."
	dpi: Int
	"Adjusts the device-pixel ratio of the output image. Default: `1`. [See docs](https://docs.imgix.com/apis/url/dpr)."
	dpr: Float
	"Applies a duotone effect to the source image. [See docs](https://docs.imgix.com/apis/url/stylize/duotone)."
	duotone: String
	"Changes the alpha of the duotone effect atop the source image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/stylize/duotone-alpha)."
	duotoneAlpha: Int
	"Adjusts the exposure of the output image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/exp)."
	exp: Int
	"A Unix timestamp specifying a UTC time. Requests made to this URL after that time will output a 404 status code. [See docs](https://docs.imgix.com/apis/url/expires)."
	expires: String
	"Alias for `fit`."
	f: String
	"Selects a face to crop to. [See docs](https://docs.imgix.com/apis/url/face-detection/faceindex)."
	faceindex: Int
	"Adjusts padding around a selected face. Default: `1`. [See docs](https://docs.imgix.com/apis/url/face-detection/facepad)."
	facepad: Float
	"Specifies that face data should be included in output when combined with `fm=json`. [See docs](https://docs.imgix.com/apis/url/face-detection/faces)."
	faces: Int
	"Determines how to fill in additional space created by the fit setting. [See docs](https://docs.imgix.com/apis/url/fill/fill)."
	fill: String
	"Sets the fill color for images with additional space created by the fit setting. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/fill/fill-color)."
	fillColor: String
	"Alias for `fillColor`."
	fillcolor: String
	"Specifies how to map the source image to the output image dimensions. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/size/fit)."
	fit: String
	"Flips an image on a specified axis. [See docs](https://docs.imgix.com/apis/url/rotation/flip)."
	flip: String
	"Changes the format of the output image. [See docs](https://docs.imgix.com/apis/url/format/fm)."
	fm: String
	"Displays crosshairs identifying the location of the set focal point. Default: `false`. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-debug)."
	fpDebug: Boolean
	"Sets the relative horizontal value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-x)."
	fpX: Float
	"Sets the relative vertical value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-y)."
	fpY: Float
	"Sets the relative zoom value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-z)."
	fpZ: Float
	"Adjusts the gamma of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/gam)."
	gam: Int
	"Sets grid colors for the transparency checkerboard grid."
	gridColors: String
	"Sets grid size for the transparency checkerboard grid."
	gridSize: Int
	"Adjusts the height of the output image. [See docs](https://docs.imgix.com/apis/url/size/h)."
	h: Float
	"Alias for `h`."
	height: Float
	"Adjusts the highlights of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/high)."
	high: Int
	"Applies a half-tone effect to the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/htn)."
	htn: Int
	"Adjusts the hue of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/hue)."
	hue: Int
	"Alias for `invert`."
	inv: Boolean
	"Inverts the colors on the source image. Default: `false`. [See docs](https://docs.imgix.com/apis/url/adjustment/invert)."
	invert: Boolean
	"Specifies that the output image should be a lossless variant. Default: `false`. [See docs](https://docs.imgix.com/apis/url/format/lossless)."
	lossless: Boolean
	"Alias for `mark`."
	m: String
	"Alias for `markAlign`."
	ma: String
	"Alias for `markAlpha`."
	malph: Int
	"Specifies the location of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark)."
	mark: String
	"Changes the watermark alignment relative to the parent image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-align)."
	markAlign: String
	"Changes the alpha of the watermark image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-alpha)."
	markAlpha: Int
	"Changes base URL of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-base)."
	markBase: String
	"Specifies the fit mode for watermark images. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-fit)."
	markFit: String
	"Adjusts the height of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-h)."
	markH: Float
	"Applies padding to the watermark image. Default: `5`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-pad)."
	markPad: Int
	"Rotates a watermark or tiled watermarks by a specified number of degrees. Default: `0`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-rot)."
	markRot: Float
	"Adjusts the scale of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-scale)."
	markScale: Int
	"Adds tiled watermark. [See docs](https://docs.imgix.com/apis/url/watermark/mark-tile)."
	markTile: String
	"Adjusts the width of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-w)."
	markW: Float
	"Adjusts the x-offset of the watermark image relative to its parent. [See docs](https://docs.imgix.com/apis/url/watermark/mark-x)."
	markX: Int
	"Adjusts the y-offset of the watermark image relative to its parent. [See docs](https://docs.imgix.com/apis/url/watermark/mark-y)."
	markY: Int
	"Alias for `markAlign`."
	markalign: String
	"Alias for `markAlpha`."
	markalpha: Int
	"Alias for `markBase`."
	markbase: String
	"Alias for `markFit`."
	markfit: String
	"Alias for `markH`."
	markh: Float
	"Alias for `markPad`."
	markpad: Int
	"Alias for `markScale`."
	markscale: Int
	"Alias for `markTile`."
	marktile: String
	"Alias for `markW`."
	markw: Float
	"Alias for `markX`."
	markx: Int
	"Alias for `markY`."
	marky: Int
	"Defines the type of mask and specifies the URL if that type is selected. [See docs](https://docs.imgix.com/apis/url/mask)."
	mask: String
	"Colors the background of the transparent mask area of images. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/mask/mask-bg)."
	maskBg: String
	"Alias for `maskBg`."
	maskbg: String
	"Specifies the maximum height of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/max-height)."
	maxH: Int
	"Alias for `maxH`."
	maxHeight: Int
	"Specifies the maximum width of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/max-width)."
	maxW: Int
	"Alias for `maxW`."
	maxWidth: Int
	"Alias for `markBase`."
	mb: String
	"Alias for `markFit`."
	mf: String
	"Alias for `markH`."
	mh: Float
	"Specifies the minimum height of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/min-height)."
	minH: Int
	"Alias for `minH`."
	minHeight: Int
	"Specifies the minimum width of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/min-width)."
	minW: Int
	"Alias for `minW`."
	minWidth: Int
	"Alias for `monochrome`."
	mono: String
	"Applies a monochrome effect to the source image. [See docs](https://docs.imgix.com/apis/url/stylize/monochrome)."
	monochrome: String
	"Alias for `markPad`."
	mp: Int
	"Alias for `markScale`."
	ms: Int
	"Alias for `markTile`."
	mtile: String
	"Alias for `markW`."
	mw: Float
	"Alias for `markX`."
	mx: Int
	"Alias for `markY`."
	my: Int
	"Reduces the noise in an image. Default: `20`. [See docs](https://docs.imgix.com/apis/url/noise-reduction/nr)."
	nr: Int
	"Provides a threshold by which to sharpen an image. Default: `20`. [See docs](https://docs.imgix.com/apis/url/noise-reduction/nrs)."
	nrs: Int
	"Alias for `orient`."
	or: Int
	"Changes the image orientation. [See docs](https://docs.imgix.com/apis/url/rotation/orient)."
	orient: Int
	"Pads an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad)."
	pad: Int
	"Sets bottom padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-bottom)."
	padBottom: Int
	"Sets left padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-left)."
	padLeft: Int
	"Sets right padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-right)."
	padRight: Int
	"Sets top padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-top)."
	padTop: Int
	"Selects a page from a PDF for display. Default: `1`. [See docs](https://docs.imgix.com/apis/url/pdf/page)."
	page: Int
	"Specifies an output format for palette-extraction. [See docs](https://docs.imgix.com/apis/url/color-palette/palette)."
	palette: String
	"Enables or disables PDF annotation. Default: `true`. [See docs](https://docs.imgix.com/apis/url/pdf/pdf-annotation)."
	pdfAnnotation: Boolean
	"Specifies a CSS prefix for all classes in palette-extraction. Default: `image`. [See docs](https://docs.imgix.com/apis/url/color-palette/prefix)."
	prefix: String
	"Applies a pixelation effect to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/px)."
	px: Int
	"Adjusts the quality of an output image. Default: `75`. [See docs](https://docs.imgix.com/apis/url/format/q)."
	q: Int
	"Crops an image to a specified rectangle. [See docs](https://docs.imgix.com/apis/url/size/rect)."
	rect: String
	"Rotates an image by a specified number of degrees. Default: `0`. [See docs](https://docs.imgix.com/apis/url/rotation/rot)."
	rot: Float
	"Adjusts the saturation of an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/sat)."
	sat: Int
	"Applies a sepia effect to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/sepia)."
	sepia: Int
	"Adjusts the highlights of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/shad)."
	shad: Float
	"Adjusts the sharpness of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/sharp)."
	sharp: Float
	"Alias for `txt`."
	t: String
	"Alias for `txtAlign`."
	ta: String
	"Alias for `txtColor`."
	tc: String
	"Alias for `txtClip`."
	tcl: String
	"Alias for `txtFont`."
	tf: String
	"Alias for `txtLine`."
	tl: Int
	"Alias for `txtPad`."
	tp: Int
	"Adds checkerboard behind images which support transparency. [See docs](https://docs.imgix.com/apis/url/fill/transparency)."
	transparency: String
	"Trims the source image. [See docs](https://docs.imgix.com/apis/url/trim/trim)."
	trim: String
	"Specifies a trim color on a trim operation. [See docs](https://docs.imgix.com/apis/url/trim/trim-color)."
	trimColor: String
	"Specifies the mean difference on a trim operation. Default: `11`. [See docs](https://docs.imgix.com/apis/url/trim/trim-md)."
	trimMd: Float
	"Pads the area of the source image before trimming. Default: `0`. [See docs](https://docs.imgix.com/apis/url/trim/trim-pad)."
	trimPad: Int
	"Specifies the standard deviation on a trim operation. Default: `10`. [See docs](https://docs.imgix.com/apis/url/trim/trim-sd)."
	trimSd: Float
	"Specifies the tolerance on a trim operation. Default: `0`. [See docs](https://docs.imgix.com/apis/url/trim/trim-tol)."
	trimTol: Float
	"Alias for `trimColor`."
	trimcolor: String
	"Alias for `trimMd`."
	trimmd: Float
	"Alias for `trimPad`."
	trimpad: Int
	"Alias for `trimSd`."
	trimsd: Float
	"Alias for `trimTol`."
	trimtol: Float
	"Alias for `txtShad`."
	tsh: Float
	"Alias for `txtSize`."
	tsz: Int
	"Alias for `txtTrack`."
	tt: Int
	"Sets the text string to render. [See docs](https://docs.imgix.com/apis/url/text/txt)."
	txt: String
	"Sets the vertical and horizontal alignment of rendered text relative to the base image. [See docs](https://docs.imgix.com/apis/url/text/txt-align)."
	txtAlign: String
	"Sets the clipping properties of rendered text. Default: `end`. [See docs](https://docs.imgix.com/apis/url/text/txt-clip)."
	txtClip: String
	"Alias for `txtColor`."
	txtClr: String
	"Specifies the color of rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-color)."
	txtColor: String
	"Specifies the fit approach for rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-fit)."
	txtFit: String
	"Selects a font for rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-font)."
	txtFont: String
	"Sets the leading (line spacing) for rendered text. Only works on the multi-line text endpoint. Default: `0`. [See docs](https://docs.imgix.com/apis/url/typesetting/txt-lead)."
	txtLead: Int
	"Controls the level of ligature substitution. [See docs](https://docs.imgix.com/apis/url/text/txt-lig)."
	txtLig: Int
	"Outlines the rendered text with a specified color. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-line)."
	txtLine: Int
	"Alias for `txtLineColor`."
	txtLineClr: String
	"Specifies a text outline color. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/text/txt-line-color)."
	txtLineColor: String
	"Specifies the padding (in device-independent pixels) between a textbox and the edges of the base image. [See docs](https://docs.imgix.com/apis/url/text/txt-pad)."
	txtPad: Int
	"Applies a shadow to rendered text. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-shad)."
	txtShad: Float
	"Sets the font size of rendered text. Default: `12`. [See docs](https://docs.imgix.com/apis/url/text/txt-size)."
	txtSize: Int
	"Sets the tracking (letter spacing) for rendered text. Only works on the multi-line text endpoint. Default: `0`. [See docs](https://docs.imgix.com/apis/url/typesetting/txt-track)."
	txtTrack: Int
	"Sets the width of rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-width)."
	txtWidth: Int
	"Alias for `txtAlign`."
	txtalign: String
	"Alias for `txtClip`."
	txtclip: String
	"Alias for `txtColor`."
	txtclr: String
	"Alias for `txtColor`."
	txtcolor: String
	"Alias for `txtFit`."
	txtfit: String
	"Alias for `txtFont`."
	txtfont: String
	"Alias for `txtLead`."
	txtlead: Int
	"Alias for `txtLig`."
	txtlig: Int
	"Alias for `txtLine`."
	txtline: Int
	"Alias for `txtLineColor`."
	txtlineclr: String
	"Alias for `txtLineColor`."
	txtlinecolor: String
	"Alias for `txtPad`."
	txtpad: Int
	"Alias for `txtShad`."
	txtshad: Float
	"Alias for `txtSize`."
	txtsize: Int
	"Alias for `txtTrack`."
	txttrack: Int
	"Alias for `txtWidth`."
	txtwidth: Int
	"Sharpens the source image using an unsharp mask. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/usm)."
	usm: Int
	"Specifies the radius for an unsharp mask operation. Default: `2.5`. [See docs](https://docs.imgix.com/apis/url/adjustment/usmrad)."
	usmrad: Float
	"Adjusts the vibrance of an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/vib)."
	vib: Int
	"Adjusts the width of the output image. [See docs](https://docs.imgix.com/apis/url/size/w)."
	w: Float
	"Alias for `w`."
	width: Float
}

input IntQueryOperatorInput {
	eq: Int
	gt: Int
	gte: Int
	in: [Int]
	lt: Int
	lte: Int
	ne: Int
	nin: [Int]
}

input InternalFilterInput {
	content: StringQueryOperatorInput
	contentDigest: StringQueryOperatorInput
	description: StringQueryOperatorInput
	fieldOwners: StringQueryOperatorInput
	ignoreType: BooleanQueryOperatorInput
	mediaType: StringQueryOperatorInput
	owner: StringQueryOperatorInput
	type: StringQueryOperatorInput
}

input JSONQueryOperatorInput {
	eq: JSON
	glob: JSON
	in: [JSON]
	ne: JSON
	nin: [JSON]
	regex: JSON
}

input NodeFilterInput {
	children: NodeFilterListInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	parent: NodeFilterInput
}

input NodeFilterListInput {
	elemMatch: NodeFilterInput
}

input PrismicAlternateLanguageTypeFilterInput {
	id: IDQueryOperatorInput
	lang: StringQueryOperatorInput
	raw: JSONQueryOperatorInput
	type: StringQueryOperatorInput
	uid: StringQueryOperatorInput
}

input PrismicAlternateLanguageTypeFilterListInput {
	elemMatch: PrismicAlternateLanguageTypeFilterInput
}

input PrismicCategoryDataTypeFilterInput {
	title: StringQueryOperatorInput
}

input PrismicCategoryFilterInput {
	_previewable: IDQueryOperatorInput
	alternate_languages: PrismicAlternateLanguageTypeFilterListInput
	children: NodeFilterListInput
	data: PrismicCategoryDataTypeFilterInput
	dataRaw: JSONQueryOperatorInput
	first_publication_date: DateQueryOperatorInput
	href: StringQueryOperatorInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	lang: StringQueryOperatorInput
	last_publication_date: DateQueryOperatorInput
	parent: NodeFilterInput
	prismicId: IDQueryOperatorInput
	tags: StringQueryOperatorInput
	type: StringQueryOperatorInput
	uid: StringQueryOperatorInput
	url: StringQueryOperatorInput
}

input PrismicCategorySortInput {
	fields: [PrismicCategoryFieldsEnum]
	order: [SortOrderEnum] = [ASC]
}

input PrismicEmbedTypeFilterInput {
	children: NodeFilterListInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	parent: NodeFilterInput
}

input PrismicEmbedTypeSortInput {
	fields: [PrismicEmbedTypeFieldsEnum]
	order: [SortOrderEnum] = [ASC]
}

input PrismicGeoPointTypeFilterInput {
	latitude: FloatQueryOperatorInput
	longitude: FloatQueryOperatorInput
}

input PrismicImageDimensionsTypeFilterInput {
	height: IntQueryOperatorInput
	width: IntQueryOperatorInput
}

input PrismicImageThumbnailTypeFilterInput {
	alt: StringQueryOperatorInput
	copyright: StringQueryOperatorInput
	dimensions: PrismicImageDimensionsTypeFilterInput
	fixed: ImgixFixedFilterInput
	fluid: ImgixFluidFilterInput
	gatsbyImageData: JSONQueryOperatorInput
	localFile: FileFilterInput
	url: StringQueryOperatorInput
}

input PrismicLinkTypeEnumQueryOperatorInput {
	eq: PrismicLinkTypeEnum
	in: [PrismicLinkTypeEnum]
	ne: PrismicLinkTypeEnum
	nin: [PrismicLinkTypeEnum]
}

input PrismicLinkTypeFilterInput {
	id: IDQueryOperatorInput
	isBroken: BooleanQueryOperatorInput
	lang: StringQueryOperatorInput
	link_type: PrismicLinkTypeEnumQueryOperatorInput
	localFile: FileFilterInput
	raw: JSONQueryOperatorInput
	size: IntQueryOperatorInput
	slug: StringQueryOperatorInput
	tags: StringQueryOperatorInput
	target: StringQueryOperatorInput
	type: StringQueryOperatorInput
	uid: StringQueryOperatorInput
	url: StringQueryOperatorInput
}

input PrismicPictureDataImageImageThumbnailsTypeFilterInput {
	thumbnail: PrismicImageThumbnailTypeFilterInput
}

input PrismicPictureDataImageImageTypeFilterInput {
	alt: StringQueryOperatorInput
	copyright: StringQueryOperatorInput
	dimensions: PrismicImageDimensionsTypeFilterInput
	fixed: ImgixFixedFilterInput
	fluid: ImgixFluidFilterInput
	gatsbyImageData: JSONQueryOperatorInput
	localFile: FileFilterInput
	thumbnails: PrismicPictureDataImageImageThumbnailsTypeFilterInput
	url: StringQueryOperatorInput
}

input PrismicPictureDataTagsFilterInput {
	tag: PrismicLinkTypeFilterInput
}

input PrismicPictureDataTagsFilterListInput {
	elemMatch: PrismicPictureDataTagsFilterInput
}

input PrismicPictureDataTypeFilterInput {
	category: PrismicLinkTypeFilterInput
	coordinates: PrismicGeoPointTypeFilterInput
	datetime: DateQueryOperatorInput
	homepage: BooleanQueryOperatorInput
	image: PrismicPictureDataImageImageTypeFilterInput
	series: PrismicLinkTypeFilterInput
	tags: PrismicPictureDataTagsFilterListInput
	title: StringQueryOperatorInput
}

input PrismicPictureFilterInput {
	_previewable: IDQueryOperatorInput
	alternate_languages: PrismicAlternateLanguageTypeFilterListInput
	children: NodeFilterListInput
	data: PrismicPictureDataTypeFilterInput
	dataRaw: JSONQueryOperatorInput
	first_publication_date: DateQueryOperatorInput
	href: StringQueryOperatorInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	lang: StringQueryOperatorInput
	last_publication_date: DateQueryOperatorInput
	parent: NodeFilterInput
	prismicId: IDQueryOperatorInput
	tags: StringQueryOperatorInput
	type: StringQueryOperatorInput
	uid: StringQueryOperatorInput
	url: StringQueryOperatorInput
}

input PrismicPictureSortInput {
	fields: [PrismicPictureFieldsEnum]
	order: [SortOrderEnum] = [ASC]
}

input PrismicSeriesDataTypeFilterInput {
	title: StringQueryOperatorInput
}

input PrismicSeriesFilterInput {
	_previewable: IDQueryOperatorInput
	alternate_languages: PrismicAlternateLanguageTypeFilterListInput
	children: NodeFilterListInput
	data: PrismicSeriesDataTypeFilterInput
	dataRaw: JSONQueryOperatorInput
	first_publication_date: DateQueryOperatorInput
	href: StringQueryOperatorInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	lang: StringQueryOperatorInput
	last_publication_date: DateQueryOperatorInput
	parent: NodeFilterInput
	prismicId: IDQueryOperatorInput
	tags: StringQueryOperatorInput
	type: StringQueryOperatorInput
	uid: StringQueryOperatorInput
	url: StringQueryOperatorInput
}

input PrismicSeriesSortInput {
	fields: [PrismicSeriesFieldsEnum]
	order: [SortOrderEnum] = [ASC]
}

input PrismicTagsDataTypeFilterInput {
	title: StringQueryOperatorInput
}

input PrismicTagsFilterInput {
	_previewable: IDQueryOperatorInput
	alternate_languages: PrismicAlternateLanguageTypeFilterListInput
	children: NodeFilterListInput
	data: PrismicTagsDataTypeFilterInput
	dataRaw: JSONQueryOperatorInput
	first_publication_date: DateQueryOperatorInput
	href: StringQueryOperatorInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	lang: StringQueryOperatorInput
	last_publication_date: DateQueryOperatorInput
	parent: NodeFilterInput
	prismicId: IDQueryOperatorInput
	tags: StringQueryOperatorInput
	type: StringQueryOperatorInput
	uid: StringQueryOperatorInput
	url: StringQueryOperatorInput
}

input PrismicTagsSortInput {
	fields: [PrismicTagsFieldsEnum]
	order: [SortOrderEnum] = [ASC]
}

input PrismicTypePathTypeFilterInput {
	children: NodeFilterListInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	parent: NodeFilterInput
	path: StringQueryOperatorInput
	type: StringQueryOperatorInput
}

input PrismicTypePathTypeSortInput {
	fields: [PrismicTypePathTypeFieldsEnum]
	order: [SortOrderEnum] = [ASC]
}

input SiteBuildMetadataFilterInput {
	buildTime: DateQueryOperatorInput
	children: NodeFilterListInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	parent: NodeFilterInput
}

input SiteBuildMetadataSortInput {
	fields: [SiteBuildMetadataFieldsEnum]
	order: [SortOrderEnum] = [ASC]
}

input SiteFilterInput {
	buildTime: DateQueryOperatorInput
	children: NodeFilterListInput
	host: StringQueryOperatorInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	parent: NodeFilterInput
	pathPrefix: StringQueryOperatorInput
	polyfill: BooleanQueryOperatorInput
	port: IntQueryOperatorInput
	siteMetadata: SiteSiteMetadataFilterInput
}

input SiteFunctionFilterInput {
	absoluteCompiledFilePath: StringQueryOperatorInput
	children: NodeFilterListInput
	functionRoute: StringQueryOperatorInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	matchPath: StringQueryOperatorInput
	originalAbsoluteFilePath: StringQueryOperatorInput
	originalRelativeFilePath: StringQueryOperatorInput
	parent: NodeFilterInput
	pluginName: StringQueryOperatorInput
	relativeCompiledFilePath: StringQueryOperatorInput
}

input SiteFunctionSortInput {
	fields: [SiteFunctionFieldsEnum]
	order: [SortOrderEnum] = [ASC]
}

input SitePageContextFilterInput {
	uid: StringQueryOperatorInput
}

input SitePageFilterInput {
	children: NodeFilterListInput
	component: StringQueryOperatorInput
	componentChunkName: StringQueryOperatorInput
	context: SitePageContextFilterInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	internalComponentName: StringQueryOperatorInput
	isCreatedByStatefulCreatePages: BooleanQueryOperatorInput
	matchPath: StringQueryOperatorInput
	parent: NodeFilterInput
	path: StringQueryOperatorInput
	pluginCreator: SitePluginFilterInput
	pluginCreatorId: StringQueryOperatorInput
}

input SitePageSortInput {
	fields: [SitePageFieldsEnum]
	order: [SortOrderEnum] = [ASC]
}

input SitePluginFilterInput {
	browserAPIs: StringQueryOperatorInput
	children: NodeFilterListInput
	id: StringQueryOperatorInput
	internal: InternalFilterInput
	name: StringQueryOperatorInput
	nodeAPIs: StringQueryOperatorInput
	packageJson: SitePluginPackageJsonFilterInput
	parent: NodeFilterInput
	pluginFilepath: StringQueryOperatorInput
	pluginOptions: SitePluginPluginOptionsFilterInput
	resolve: StringQueryOperatorInput
	ssrAPIs: StringQueryOperatorInput
	version: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterInput {
	name: StringQueryOperatorInput
	version: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterListInput {
	elemMatch: SitePluginPackageJsonDependenciesFilterInput
}

input SitePluginPackageJsonDevDependenciesFilterInput {
	name: StringQueryOperatorInput
	version: StringQueryOperatorInput
}

input SitePluginPackageJsonDevDependenciesFilterListInput {
	elemMatch: SitePluginPackageJsonDevDependenciesFilterInput
}

input SitePluginPackageJsonFilterInput {
	dependencies: SitePluginPackageJsonDependenciesFilterListInput
	description: StringQueryOperatorInput
	devDependencies: SitePluginPackageJsonDevDependenciesFilterListInput
	keywords: StringQueryOperatorInput
	license: StringQueryOperatorInput
	main: StringQueryOperatorInput
	name: StringQueryOperatorInput
	peerDependencies: SitePluginPackageJsonPeerDependenciesFilterListInput
	version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterInput {
	name: StringQueryOperatorInput
	version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterListInput {
	elemMatch: SitePluginPackageJsonPeerDependenciesFilterInput
}

input SitePluginPluginOptionsDirectivesFilterInput {
	connect_src: StringQueryOperatorInput
	font_src: StringQueryOperatorInput
	frame_src: StringQueryOperatorInput
	img_src: StringQueryOperatorInput
	prefetch_src: StringQueryOperatorInput
	script_src: StringQueryOperatorInput
	style_src: StringQueryOperatorInput
}

input SitePluginPluginOptionsFilterInput {
	accessToken: StringQueryOperatorInput
	allExtensions: BooleanQueryOperatorInput
	allPageHeaders: StringQueryOperatorInput
	apiEndpoint: StringQueryOperatorInput
	autoLabel: StringQueryOperatorInput
	background_color: StringQueryOperatorInput
	cache_busting_mode: StringQueryOperatorInput
	createLinkInHead: BooleanQueryOperatorInput
	crossOrigin: StringQueryOperatorInput
	cssPropOptimization: BooleanQueryOperatorInput
	description: StringQueryOperatorInput
	directives: SitePluginPluginOptionsDirectivesFilterInput
	disableOnDev: BooleanQueryOperatorInput
	display: StringQueryOperatorInput
	entryLimit: IntQueryOperatorInput
	icon: StringQueryOperatorInput
	icon_options: SitePluginPluginOptionsIcon_optionsFilterInput
	imageImgixParams: SitePluginPluginOptionsImageImgixParamsFilterInput
	imagePlaceholderImgixParams: SitePluginPluginOptionsImagePlaceholderImgixParamsFilterInput
	include_favicon: BooleanQueryOperatorInput
	isTSX: BooleanQueryOperatorInput
	jsxPragma: StringQueryOperatorInput
	labelFormat: StringQueryOperatorInput
	lang: StringQueryOperatorInput
	legacy: BooleanQueryOperatorInput
	mergeDefaultDirectives: BooleanQueryOperatorInput
	mergeScriptHashes: BooleanQueryOperatorInput
	mergeStyleHashes: BooleanQueryOperatorInput
	name: StringQueryOperatorInput
	output: StringQueryOperatorInput
	path: StringQueryOperatorInput
	pathCheck: BooleanQueryOperatorInput
	query: StringQueryOperatorInput
	repositoryName: StringQueryOperatorInput
	schemas: SitePluginPluginOptionsSchemasFilterInput
	short_name: StringQueryOperatorInput
	sourceMap: BooleanQueryOperatorInput
	start_url: StringQueryOperatorInput
	theme_color: StringQueryOperatorInput
	theme_color_in_head: BooleanQueryOperatorInput
	workboxConfig: SitePluginPluginOptionsWorkboxConfigFilterInput
}

input SitePluginPluginOptionsIcon_optionsFilterInput {
	purpose: StringQueryOperatorInput
}

input SitePluginPluginOptionsImageImgixParamsFilterInput {
	auto: StringQueryOperatorInput
	fit: StringQueryOperatorInput
	q: IntQueryOperatorInput
}

input SitePluginPluginOptionsImagePlaceholderImgixParamsFilterInput {
	blur: IntQueryOperatorInput
	w: IntQueryOperatorInput
}

input SitePluginPluginOptionsSchemasCategoryFilterInput {
	Main: SitePluginPluginOptionsSchemasCategoryMainFilterInput
}

input SitePluginPluginOptionsSchemasCategoryMainFilterInput {
	title: SitePluginPluginOptionsSchemasCategoryMainTitleFilterInput
	uid: SitePluginPluginOptionsSchemasCategoryMainUidFilterInput
}

input SitePluginPluginOptionsSchemasCategoryMainTitleConfigFilterInput {
	label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasCategoryMainTitleFilterInput {
	config: SitePluginPluginOptionsSchemasCategoryMainTitleConfigFilterInput
	type: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasCategoryMainUidConfigFilterInput {
	label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasCategoryMainUidFilterInput {
	config: SitePluginPluginOptionsSchemasCategoryMainUidConfigFilterInput
	type: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasFilterInput {
	category: SitePluginPluginOptionsSchemasCategoryFilterInput
	picture: SitePluginPluginOptionsSchemasPictureFilterInput
	series: SitePluginPluginOptionsSchemasSeriesFilterInput
	tags: SitePluginPluginOptionsSchemasTagsFilterInput
}

input SitePluginPluginOptionsSchemasPictureFilterInput {
	Main: SitePluginPluginOptionsSchemasPictureMainFilterInput
}

input SitePluginPluginOptionsSchemasPictureMainCategoryConfigFilterInput {
	customtypes: StringQueryOperatorInput
	label: StringQueryOperatorInput
	select: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasPictureMainCategoryFilterInput {
	config: SitePluginPluginOptionsSchemasPictureMainCategoryConfigFilterInput
	type: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasPictureMainCoordinatesConfigFilterInput {
	label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasPictureMainCoordinatesFilterInput {
	config: SitePluginPluginOptionsSchemasPictureMainCoordinatesConfigFilterInput
	type: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasPictureMainDatetimeConfigFilterInput {
	label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasPictureMainDatetimeFilterInput {
	config: SitePluginPluginOptionsSchemasPictureMainDatetimeConfigFilterInput
	type: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasPictureMainFilterInput {
	category: SitePluginPluginOptionsSchemasPictureMainCategoryFilterInput
	coordinates: SitePluginPluginOptionsSchemasPictureMainCoordinatesFilterInput
	datetime: SitePluginPluginOptionsSchemasPictureMainDatetimeFilterInput
	homepage: SitePluginPluginOptionsSchemasPictureMainHomepageFilterInput
	image: SitePluginPluginOptionsSchemasPictureMainImageFilterInput
	series: SitePluginPluginOptionsSchemasPictureMainSeriesFilterInput
	tags: SitePluginPluginOptionsSchemasPictureMainTagsFilterInput
	title: SitePluginPluginOptionsSchemasPictureMainTitleFilterInput
	uid: SitePluginPluginOptionsSchemasPictureMainUidFilterInput
}

input SitePluginPluginOptionsSchemasPictureMainHomepageConfigFilterInput {
	default_value: BooleanQueryOperatorInput
	label: StringQueryOperatorInput
	placeholder_false: StringQueryOperatorInput
	placeholder_true: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasPictureMainHomepageFilterInput {
	config: SitePluginPluginOptionsSchemasPictureMainHomepageConfigFilterInput
	type: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasPictureMainImageConfigConstraintFilterInput {
	width: IntQueryOperatorInput
}

input SitePluginPluginOptionsSchemasPictureMainImageConfigFilterInput {
	constraint: SitePluginPluginOptionsSchemasPictureMainImageConfigConstraintFilterInput
	label: StringQueryOperatorInput
	thumbnails: SitePluginPluginOptionsSchemasPictureMainImageConfigThumbnailsFilterListInput
}

input SitePluginPluginOptionsSchemasPictureMainImageConfigThumbnailsFilterInput {
	name: StringQueryOperatorInput
	width: IntQueryOperatorInput
}

input SitePluginPluginOptionsSchemasPictureMainImageConfigThumbnailsFilterListInput {
	elemMatch: SitePluginPluginOptionsSchemasPictureMainImageConfigThumbnailsFilterInput
}

input SitePluginPluginOptionsSchemasPictureMainImageFilterInput {
	config: SitePluginPluginOptionsSchemasPictureMainImageConfigFilterInput
	type: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasPictureMainSeriesConfigFilterInput {
	customtypes: StringQueryOperatorInput
	label: StringQueryOperatorInput
	select: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasPictureMainSeriesFilterInput {
	config: SitePluginPluginOptionsSchemasPictureMainSeriesConfigFilterInput
	type: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasPictureMainTagsConfigFieldsFilterInput {
	tag: SitePluginPluginOptionsSchemasPictureMainTagsConfigFieldsTagFilterInput
}

input SitePluginPluginOptionsSchemasPictureMainTagsConfigFieldsTagConfigFilterInput {
	customtypes: StringQueryOperatorInput
	label: StringQueryOperatorInput
	select: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasPictureMainTagsConfigFieldsTagFilterInput {
	config: SitePluginPluginOptionsSchemasPictureMainTagsConfigFieldsTagConfigFilterInput
	type: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasPictureMainTagsConfigFilterInput {
	fields: SitePluginPluginOptionsSchemasPictureMainTagsConfigFieldsFilterInput
	label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasPictureMainTagsFilterInput {
	config: SitePluginPluginOptionsSchemasPictureMainTagsConfigFilterInput
	type: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasPictureMainTitleConfigFilterInput {
	label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasPictureMainTitleFilterInput {
	config: SitePluginPluginOptionsSchemasPictureMainTitleConfigFilterInput
	type: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasPictureMainUidConfigFilterInput {
	label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasPictureMainUidFilterInput {
	config: SitePluginPluginOptionsSchemasPictureMainUidConfigFilterInput
	type: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasSeriesFilterInput {
	Main: SitePluginPluginOptionsSchemasSeriesMainFilterInput
}

input SitePluginPluginOptionsSchemasSeriesMainFilterInput {
	title: SitePluginPluginOptionsSchemasSeriesMainTitleFilterInput
	uid: SitePluginPluginOptionsSchemasSeriesMainUidFilterInput
}

input SitePluginPluginOptionsSchemasSeriesMainTitleConfigFilterInput {
	label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasSeriesMainTitleFilterInput {
	config: SitePluginPluginOptionsSchemasSeriesMainTitleConfigFilterInput
	type: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasSeriesMainUidConfigFilterInput {
	label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasSeriesMainUidFilterInput {
	config: SitePluginPluginOptionsSchemasSeriesMainUidConfigFilterInput
	type: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTagsFilterInput {
	Main: SitePluginPluginOptionsSchemasTagsMainFilterInput
}

input SitePluginPluginOptionsSchemasTagsMainFilterInput {
	title: SitePluginPluginOptionsSchemasTagsMainTitleFilterInput
	uid: SitePluginPluginOptionsSchemasTagsMainUidFilterInput
}

input SitePluginPluginOptionsSchemasTagsMainTitleConfigFilterInput {
	label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTagsMainTitleFilterInput {
	config: SitePluginPluginOptionsSchemasTagsMainTitleConfigFilterInput
	type: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTagsMainUidConfigFilterInput {
	label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTagsMainUidFilterInput {
	config: SitePluginPluginOptionsSchemasTagsMainUidConfigFilterInput
	type: StringQueryOperatorInput
}

input SitePluginPluginOptionsWorkboxConfigFilterInput {
	globPatterns: StringQueryOperatorInput
}

input SitePluginSortInput {
	fields: [SitePluginFieldsEnum]
	order: [SortOrderEnum] = [ASC]
}

input SiteSiteMetadataFilterInput {
	description: StringQueryOperatorInput
	siteUrl: StringQueryOperatorInput
	title: StringQueryOperatorInput
}

input SiteSortInput {
	fields: [SiteFieldsEnum]
	order: [SortOrderEnum] = [ASC]
}

input StringQueryOperatorInput {
	eq: String
	glob: String
	in: [String]
	ne: String
	nin: [String]
	regex: String
}


"A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON
